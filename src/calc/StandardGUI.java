/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calc;

import static java.lang.Math.sqrt;

/**
 *
 * @author David van de Kamp
 */
public class StandardGUI extends javax.swing.JFrame
{
    private static final String NO_OP = "\0";
    private static final String PLUS = "+";
    private static final String SUBTRACT = "-";
    private static final String MULTIPLY = "*";
    private static final String DIVIDE = "/";
    private static final String SQRT = "sqrt";
    private static final String PRCNT = "%";
    private static final String RCPRCL = "1/x";
    
    private double number1 = 0;
    private String operator = NO_OP;
    private boolean readyForNextNumber;
    private String calculationString = "";
    private double mem = 0;
    
    /**
     * Creates new form GUI
     */
    public StandardGUI() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        keyReciprocal = new javax.swing.JButton();
        display = new javax.swing.JPanel();
        answer = new javax.swing.JLabel();
        calculation = new javax.swing.JLabel();
        memLabel = new javax.swing.JLabel();
        key1 = new javax.swing.JButton();
        key2 = new javax.swing.JButton();
        key3 = new javax.swing.JButton();
        keySubract = new javax.swing.JButton();
        key0 = new javax.swing.JButton();
        keyPeriod = new javax.swing.JButton();
        keyAdd = new javax.swing.JButton();
        keyClear = new javax.swing.JButton();
        keyEquals = new javax.swing.JButton();
        keyPositiveOrNegative = new javax.swing.JButton();
        keySqrt = new javax.swing.JButton();
        key7 = new javax.swing.JButton();
        key8 = new javax.swing.JButton();
        key9 = new javax.swing.JButton();
        keyDivide = new javax.swing.JButton();
        keyPercent = new javax.swing.JButton();
        key4 = new javax.swing.JButton();
        key5 = new javax.swing.JButton();
        keyMC = new javax.swing.JButton();
        keyMR = new javax.swing.JButton();
        keyMS = new javax.swing.JButton();
        keyMPositive = new javax.swing.JButton();
        keyMNegative = new javax.swing.JButton();
        keyBackspace = new javax.swing.JButton();
        keyCE = new javax.swing.JButton();
        key6 = new javax.swing.JButton();
        keyMultiply = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        View = new javax.swing.JMenu();
        standardMode = new javax.swing.JRadioButtonMenuItem();
        scientificMode = new javax.swing.JRadioButtonMenuItem();
        programmerMode = new javax.swing.JRadioButtonMenuItem();
        Edit = new javax.swing.JMenu();
        copy = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(320, 356));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        keyReciprocal.setText("1/x");
        keyReciprocal.setAlignmentY(0.0F);
        keyReciprocal.setBorder(null);
        keyReciprocal.setFocusPainted(false);
        keyReciprocal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyReciprocal.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyReciprocal.setMaximumSize(new java.awt.Dimension(240, 160));
        keyReciprocal.setMinimumSize(new java.awt.Dimension(30, 20));
        keyReciprocal.setPreferredSize(new java.awt.Dimension(60, 40));
        keyReciprocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(keyReciprocal, gridBagConstraints);

        display.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        answer.setBackground(new java.awt.Color(255, 255, 255));
        answer.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        answer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        answer.setText("0");

        calculation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        memLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        memLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout displayLayout = new javax.swing.GroupLayout(display);
        display.setLayout(displayLayout);
        displayLayout.setHorizontalGroup(
            displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayLayout.createSequentialGroup()
                        .addComponent(memLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(answer, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))
                    .addComponent(calculation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        displayLayout.setVerticalGroup(
            displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayLayout.createSequentialGroup()
                .addComponent(calculation, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(answer, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(memLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 243;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(display, gridBagConstraints);

        key1.setText("1");
        key1.setAlignmentY(0.0F);
        key1.setBorder(null);
        key1.setFocusPainted(false);
        key1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        key1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        key1.setMaximumSize(new java.awt.Dimension(240, 160));
        key1.setMinimumSize(new java.awt.Dimension(30, 20));
        key1.setPreferredSize(new java.awt.Dimension(60, 40));
        key1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(key1, gridBagConstraints);

        key2.setText("2");
        key2.setAlignmentY(0.0F);
        key2.setBorder(null);
        key2.setFocusPainted(false);
        key2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        key2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        key2.setMaximumSize(new java.awt.Dimension(240, 160));
        key2.setMinimumSize(new java.awt.Dimension(30, 20));
        key2.setPreferredSize(new java.awt.Dimension(60, 40));
        key2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key2, gridBagConstraints);

        key3.setText("3");
        key3.setAlignmentY(0.0F);
        key3.setBorder(null);
        key3.setFocusPainted(false);
        key3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        key3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        key3.setMaximumSize(new java.awt.Dimension(240, 160));
        key3.setMinimumSize(new java.awt.Dimension(30, 20));
        key3.setPreferredSize(new java.awt.Dimension(60, 40));
        key3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key3, gridBagConstraints);

        keySubract.setText("-");
        keySubract.setAlignmentY(0.0F);
        keySubract.setBorder(null);
        keySubract.setFocusPainted(false);
        keySubract.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keySubract.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keySubract.setMaximumSize(new java.awt.Dimension(240, 160));
        keySubract.setMinimumSize(new java.awt.Dimension(30, 20));
        keySubract.setPreferredSize(new java.awt.Dimension(60, 40));
        keySubract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keySubract, gridBagConstraints);

        key0.setText("0");
        key0.setAlignmentY(0.0F);
        key0.setBorder(null);
        key0.setFocusPainted(false);
        key0.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        key0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        key0.setMaximumSize(new java.awt.Dimension(480, 160));
        key0.setMinimumSize(new java.awt.Dimension(60, 20));
        key0.setName(""); // NOI18N
        key0.setPreferredSize(new java.awt.Dimension(120, 40));
        key0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        getContentPane().add(key0, gridBagConstraints);

        keyPeriod.setText(".");
        keyPeriod.setAlignmentY(0.0F);
        keyPeriod.setBorder(null);
        keyPeriod.setFocusPainted(false);
        keyPeriod.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyPeriod.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyPeriod.setMaximumSize(new java.awt.Dimension(240, 160));
        keyPeriod.setMinimumSize(new java.awt.Dimension(30, 20));
        keyPeriod.setPreferredSize(new java.awt.Dimension(60, 40));
        keyPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyPeriod, gridBagConstraints);

        keyAdd.setText("+");
        keyAdd.setAlignmentY(0.0F);
        keyAdd.setBorder(null);
        keyAdd.setFocusPainted(false);
        keyAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyAdd.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyAdd.setMaximumSize(new java.awt.Dimension(240, 160));
        keyAdd.setMinimumSize(new java.awt.Dimension(30, 20));
        keyAdd.setPreferredSize(new java.awt.Dimension(60, 40));
        keyAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyAdd, gridBagConstraints);

        keyClear.setText("C");
        keyClear.setAlignmentY(0.0F);
        keyClear.setBorder(null);
        keyClear.setFocusPainted(false);
        keyClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyClear.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyClear.setMaximumSize(new java.awt.Dimension(240, 160));
        keyClear.setMinimumSize(new java.awt.Dimension(30, 20));
        keyClear.setPreferredSize(new java.awt.Dimension(60, 40));
        keyClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyClear, gridBagConstraints);

        keyEquals.setText("=");
        keyEquals.setAlignmentY(0.0F);
        keyEquals.setBorder(null);
        keyEquals.setFocusPainted(false);
        keyEquals.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyEquals.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyEquals.setMaximumSize(new java.awt.Dimension(240, 320));
        keyEquals.setMinimumSize(new java.awt.Dimension(30, 40));
        keyEquals.setPreferredSize(new java.awt.Dimension(60, 80));
        keyEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        getContentPane().add(keyEquals, gridBagConstraints);

        keyPositiveOrNegative.setText("+/-");
        keyPositiveOrNegative.setAlignmentY(0.0F);
        keyPositiveOrNegative.setBorder(null);
        keyPositiveOrNegative.setFocusPainted(false);
        keyPositiveOrNegative.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyPositiveOrNegative.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyPositiveOrNegative.setMaximumSize(new java.awt.Dimension(240, 160));
        keyPositiveOrNegative.setMinimumSize(new java.awt.Dimension(30, 20));
        keyPositiveOrNegative.setPreferredSize(new java.awt.Dimension(60, 40));
        keyPositiveOrNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyPositiveOrNegative, gridBagConstraints);

        keySqrt.setText("sqrt");
        keySqrt.setAlignmentY(0.0F);
        keySqrt.setBorder(null);
        keySqrt.setFocusPainted(false);
        keySqrt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keySqrt.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keySqrt.setMaximumSize(new java.awt.Dimension(240, 160));
        keySqrt.setMinimumSize(new java.awt.Dimension(30, 20));
        keySqrt.setPreferredSize(new java.awt.Dimension(60, 40));
        keySqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(keySqrt, gridBagConstraints);

        key7.setText("7");
        key7.setAlignmentY(0.0F);
        key7.setBorder(null);
        key7.setFocusPainted(false);
        key7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        key7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        key7.setMaximumSize(new java.awt.Dimension(240, 160));
        key7.setMinimumSize(new java.awt.Dimension(30, 20));
        key7.setPreferredSize(new java.awt.Dimension(60, 40));
        key7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(key7, gridBagConstraints);

        key8.setText("8");
        key8.setAlignmentY(0.0F);
        key8.setBorder(null);
        key8.setFocusPainted(false);
        key8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        key8.setMargin(new java.awt.Insets(0, 0, 0, 0));
        key8.setMaximumSize(new java.awt.Dimension(240, 160));
        key8.setMinimumSize(new java.awt.Dimension(30, 20));
        key8.setPreferredSize(new java.awt.Dimension(60, 40));
        key8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key8, gridBagConstraints);

        key9.setText("9");
        key9.setAlignmentY(0.0F);
        key9.setBorder(null);
        key9.setFocusPainted(false);
        key9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        key9.setMargin(new java.awt.Insets(0, 0, 0, 0));
        key9.setMaximumSize(new java.awt.Dimension(240, 160));
        key9.setMinimumSize(new java.awt.Dimension(30, 20));
        key9.setPreferredSize(new java.awt.Dimension(60, 40));
        key9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key9, gridBagConstraints);

        keyDivide.setText("/");
        keyDivide.setAlignmentY(0.0F);
        keyDivide.setBorder(null);
        keyDivide.setFocusPainted(false);
        keyDivide.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyDivide.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyDivide.setMaximumSize(new java.awt.Dimension(240, 160));
        keyDivide.setMinimumSize(new java.awt.Dimension(30, 20));
        keyDivide.setPreferredSize(new java.awt.Dimension(60, 40));
        keyDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyDivide, gridBagConstraints);

        keyPercent.setText("%");
        keyPercent.setAlignmentY(0.0F);
        keyPercent.setBorder(null);
        keyPercent.setFocusPainted(false);
        keyPercent.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyPercent.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyPercent.setMaximumSize(new java.awt.Dimension(240, 160));
        keyPercent.setMinimumSize(new java.awt.Dimension(30, 20));
        keyPercent.setPreferredSize(new java.awt.Dimension(60, 40));
        keyPercent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(keyPercent, gridBagConstraints);

        key4.setText("4");
        key4.setAlignmentY(0.0F);
        key4.setBorder(null);
        key4.setFocusPainted(false);
        key4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        key4.setMargin(new java.awt.Insets(0, 0, 0, 0));
        key4.setMaximumSize(new java.awt.Dimension(240, 160));
        key4.setMinimumSize(new java.awt.Dimension(30, 20));
        key4.setPreferredSize(new java.awt.Dimension(60, 40));
        key4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(key4, gridBagConstraints);

        key5.setText("5");
        key5.setAlignmentY(0.0F);
        key5.setBorder(null);
        key5.setFocusPainted(false);
        key5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        key5.setMargin(new java.awt.Insets(0, 0, 0, 0));
        key5.setMaximumSize(new java.awt.Dimension(240, 160));
        key5.setMinimumSize(new java.awt.Dimension(30, 20));
        key5.setPreferredSize(new java.awt.Dimension(60, 40));
        key5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key5, gridBagConstraints);

        keyMC.setText("MC");
        keyMC.setAlignmentY(0.0F);
        keyMC.setBorder(null);
        keyMC.setFocusPainted(false);
        keyMC.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyMC.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyMC.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMC.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMC.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_clear_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        getContentPane().add(keyMC, gridBagConstraints);

        keyMR.setText("MR");
        keyMR.setAlignmentY(0.0F);
        keyMR.setBorder(null);
        keyMR.setFocusPainted(false);
        keyMR.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyMR.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyMR.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMR.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMR.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_recall_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyMR, gridBagConstraints);

        keyMS.setText("MS");
        keyMS.setAlignmentY(0.0F);
        keyMS.setBorder(null);
        keyMS.setFocusPainted(false);
        keyMS.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyMS.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyMS.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMS.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMS.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_set_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyMS, gridBagConstraints);

        keyMPositive.setText("M+");
        keyMPositive.setAlignmentY(0.0F);
        keyMPositive.setBorder(null);
        keyMPositive.setFocusPainted(false);
        keyMPositive.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyMPositive.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyMPositive.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMPositive.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMPositive.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMPositive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_add_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyMPositive, gridBagConstraints);

        keyMNegative.setText("M-");
        keyMNegative.setAlignmentY(0.0F);
        keyMNegative.setBorder(null);
        keyMNegative.setFocusPainted(false);
        keyMNegative.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyMNegative.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyMNegative.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMNegative.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMNegative.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_subtract_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 10);
        getContentPane().add(keyMNegative, gridBagConstraints);

        keyBackspace.setText("<---");
        keyBackspace.setAlignmentY(0.0F);
        keyBackspace.setBorder(null);
        keyBackspace.setFocusPainted(false);
        keyBackspace.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyBackspace.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyBackspace.setMaximumSize(new java.awt.Dimension(240, 160));
        keyBackspace.setMinimumSize(new java.awt.Dimension(30, 20));
        keyBackspace.setPreferredSize(new java.awt.Dimension(60, 40));
        keyBackspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backspace(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(keyBackspace, gridBagConstraints);

        keyCE.setText("CE");
        keyCE.setAlignmentY(0.0F);
        keyCE.setBorder(null);
        keyCE.setFocusPainted(false);
        keyCE.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyCE.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyCE.setMaximumSize(new java.awt.Dimension(240, 160));
        keyCE.setMinimumSize(new java.awt.Dimension(30, 20));
        keyCE.setPreferredSize(new java.awt.Dimension(60, 40));
        keyCE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEntry(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyCE, gridBagConstraints);

        key6.setText("6");
        key6.setAlignmentY(0.0F);
        key6.setBorder(null);
        key6.setFocusPainted(false);
        key6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        key6.setMargin(new java.awt.Insets(0, 0, 0, 0));
        key6.setMaximumSize(new java.awt.Dimension(240, 160));
        key6.setMinimumSize(new java.awt.Dimension(30, 20));
        key6.setPreferredSize(new java.awt.Dimension(60, 40));
        key6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key6, gridBagConstraints);

        keyMultiply.setText("*");
        keyMultiply.setAlignmentY(0.0F);
        keyMultiply.setBorder(null);
        keyMultiply.setFocusPainted(false);
        keyMultiply.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keyMultiply.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keyMultiply.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMultiply.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMultiply.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyMultiply, gridBagConstraints);

        View.setText("View");

        standardMode.setSelected(true);
        standardMode.setText("Standard");
        View.add(standardMode);

        scientificMode.setText("Scienific");
        scientificMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                science_handler(evt);
            }
        });
        View.add(scientificMode);

        programmerMode.setText("Programmer");
        programmerMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programmer_handler(evt);
            }
        });
        View.add(programmerMode);

        MenuBar.add(View);

        Edit.setText("Edit");

        copy.setText("Copy");
        Edit.add(copy);

        paste.setText("Paste");
        Edit.add(paste);

        MenuBar.add(Edit);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //------------------------------number_handler------------------------------
    private void number_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number_handler
        
        if(readyForNextNumber) 
        {
            answer.setText(evt.getActionCommand());
            readyForNextNumber = false;
        } 
        else 
        {
            answer.setText(answer.getText() + evt.getActionCommand().charAt(0));
        }
        //take out any 0 at the beginning if there is one
        if(answer.getText().startsWith("0") && answer.getText() != "0")
        {
            answer.setText(answer.getText().substring(1, answer.getText().length()));
        }
    }//GEN-LAST:event_number_handler
    //------------------------------op_handler------------------------------
    private void op_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op_handler
        
        String operator = evt.getActionCommand();
        String result = "";
        
        switch(operator) 
        {
            case "+":
                result = opAdd(answer.getText());
                break;
            case "-":
                result = opSubtract(answer.getText());
                break;
            case "*":
                result = opMultiply(answer.getText());
                break;
            case "/":
                result = opDivide(answer.getText());
                break;
            case "=":
                result = opEquals(answer.getText());
                break;
        }
            
        answer.setText(result);
        
        String temp = answer.getText().substring(answer.getText().length() - 2, answer.getText().length());
        
        if(answer.getText().length() >= 3)
        {
            //if the number ends in ".0", take it off the string
            if(temp == ".0")
            {
                answer.setText(answer.getText().substring(0, answer.getText().length() - 2));
            }
        }
        
        readyForNextNumber = true;
    }//GEN-LAST:event_op_handler
    //------------------------------clear------------------------------
    private void clear(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear
        calculationString = "";
        calculation.setText("");
        answer.setText("0");
        number1 = 0;
        operator = NO_OP;
    }//GEN-LAST:event_clear
    //------------------------------clearEntry------------------------------
    private void clearEntry(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEntry
        answer.setText("0");
    }//GEN-LAST:event_clearEntry
    //------------------------------backspace------------------------------
    private void backspace(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backspace
        if(answer.getText().length() > 1)
        {
            answer.setText(answer.getText().substring(0, answer.getText().length() - 1));
        }
        else
        {
            answer.setText("0");
        }
    }//GEN-LAST:event_backspace
    //------------------------------negate------------------------------
    private void negate(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negate
        if(answer.getText().startsWith("-"))
        {
            answer.setText(answer.getText().substring(1, answer.getText().length()));
        }
        else
        {
            answer.setText("-" + answer.getText());
        }
    }//GEN-LAST:event_negate
    //------------------------------op_uni_handler------------------------------
    private void op_uni_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op_uni_handler
        String operator = evt.getActionCommand();
        String result = "";
        
        switch(operator) 
        {
            case "sqrt":
                result = opSqrt(answer.getText());
                break;
            case "%":
                result = opPercent(answer.getText());
                break;
            case "1/x":
                result = opReciprocal(answer.getText());
                break;
        }
            
        answer.setText(result);
    }//GEN-LAST:event_op_uni_handler
    //------------------------------science_handler------------------------------
    private void science_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_science_handler
        new ScientificGUI().setVisible(true);        //start up the programmer mode
        this.dispose();     //close the other form
    }//GEN-LAST:event_science_handler
    //------------------------------programmer_handler------------------------------
    private void programmer_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programmer_handler
        new ProgrammerGUI().setVisible(true);        //start up the programmer mode
        this.dispose();     //close the other form
    }//GEN-LAST:event_programmer_handler
    //------------------------------mem_clear_handler------------------------------
    private void mem_clear_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_clear_handler
        mem = 0;
        memLabel.setText("");
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_clear_handler
    //------------------------------mem_recall_handler------------------------------
    private void mem_recall_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_recall_handler
        answer.setText(Double.toString(mem));
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_recall_handler
    //------------------------------mem_set_handler------------------------------
    private void mem_set_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_set_handler
        mem = parseNumber(answer.getText());
        memLabel.setText("M");
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_set_handler
    //------------------------------mem_add_handler------------------------------
    private void mem_add_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_add_handler
        mem += parseNumber(answer.getText());
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_add_handler
    //------------------------------mem_subtract_handler------------------------------
    private void mem_subtract_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_subtract_handler
        mem -= parseNumber(answer.getText());
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_subtract_handler
    //------------------------------opEquals------------------------------
    public String opEquals(String number)
    {
        double result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = NO_OP;
        
        calculationString = "";
        calculation.setText(calculationString);

        number1 = result;
        return Double.toString(result);
    }
    //------------------------------opAdd------------------------------
    public String opAdd(String number)
    {
        double result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = PLUS;
        
        calculationString += (answer.getText() + " + ");
        calculation.setText(calculationString);

        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opSubtract------------------------------
    public String opSubtract(String number)
    {
        double result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = SUBTRACT;
        
        calculationString += (answer.getText() + " - ");
        calculation.setText(calculationString);

        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opMultiply------------------------------
    public String opMultiply(String number)
    {
        double result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = MULTIPLY;

        calculationString += (answer.getText() + " * ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opDivide------------------------------
    public String opDivide(String number)
    {
        double result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = DIVIDE;
        
        calculationString += (answer.getText() + " / ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opSqrt------------------------------
    public String opSqrt(String number)
    {
        double result;
        
        operator = SQRT;
        
        result = performOperation(parseNumber(number));
        
        calculationString += (" sqrt(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opPercent------------------------------
    public String opPercent(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = PRCNT;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += Double.toString(result);
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opReciprocal------------------------------
    public String opReciprocal(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = RCPRCL;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += (" reciproc(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------perfomOperation------------------------------
    private double performOperation(double number2)
    {
        double result = 0.0F;

        switch(operator)
        {
            case PLUS:
                result = number1 + number2;
                break;
            case SUBTRACT:
                result = number1 - number2;
                break;
            case MULTIPLY:
                result = number1 * number2;
                break;
            case DIVIDE:
                result = number1 / number2;
                break;
            case SQRT:
                result = (double)sqrt(number2);
                break;
            case PRCNT:
                result = number1 * (number2 / 100);
                break;
            case RCPRCL:
                result = 1 / number2;
                break;
        }

        return result;
    }
    //------------------------------parseNumber------------------------------
    private static double parseNumber(String number)
    {
        double real_number;

        try 
        {
            real_number = Double.parseDouble(number);
        }
        catch(NumberFormatException e)
        {
            real_number = Double.NaN;
        }

        return real_number;
    }
    //------------------------------main------------------------------
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StandardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StandardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StandardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StandardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run() 
            {
                new StandardGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Edit;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu View;
    private javax.swing.JLabel answer;
    private javax.swing.JLabel calculation;
    private javax.swing.JMenuItem copy;
    private javax.swing.JPanel display;
    private javax.swing.JButton key0;
    private javax.swing.JButton key1;
    private javax.swing.JButton key2;
    private javax.swing.JButton key3;
    private javax.swing.JButton key4;
    private javax.swing.JButton key5;
    private javax.swing.JButton key6;
    private javax.swing.JButton key7;
    private javax.swing.JButton key8;
    private javax.swing.JButton key9;
    private javax.swing.JButton keyAdd;
    private javax.swing.JButton keyBackspace;
    private javax.swing.JButton keyCE;
    private javax.swing.JButton keyClear;
    private javax.swing.JButton keyDivide;
    private javax.swing.JButton keyEquals;
    private javax.swing.JButton keyMC;
    private javax.swing.JButton keyMNegative;
    private javax.swing.JButton keyMPositive;
    private javax.swing.JButton keyMR;
    private javax.swing.JButton keyMS;
    private javax.swing.JButton keyMultiply;
    private javax.swing.JButton keyPercent;
    private javax.swing.JButton keyPeriod;
    private javax.swing.JButton keyPositiveOrNegative;
    private javax.swing.JButton keyReciprocal;
    private javax.swing.JButton keySqrt;
    private javax.swing.JButton keySubract;
    private javax.swing.JLabel memLabel;
    private javax.swing.JMenuItem paste;
    private javax.swing.JRadioButtonMenuItem programmerMode;
    private javax.swing.JRadioButtonMenuItem scientificMode;
    private javax.swing.JRadioButtonMenuItem standardMode;
    // End of variables declaration//GEN-END:variables
}
