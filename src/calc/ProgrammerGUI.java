/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calc;

/**
 *
 * @author David van de Kamp
 */
public class ProgrammerGUI extends javax.swing.JFrame
{
    private static final String NO_OP = "\0";
    private static final String PLUS = "+";
    private static final String SUBTRACT = "-";
    private static final String MULTIPLY = "*";
    private static final String DIVIDE = "/";
    private static final String MOD = "Mod";
    private static final String ROR = "RoR";
    private static final String XOR = "Xor";
    private static final String RSH = "Rsh";
    private static final String AND = "And";
    private static final String ROL = "RoL";
    private static final String OR = "Or";
    private static final String LSH = "Lsh";
    private static final String NOT = "Not";
    
    private long number1 = 0;
    private String operator = NO_OP;
    private boolean readyForNextNumber;
    private String calculationString = "";
    private long mem = 0;
    
    private String strBinary = "0";     //used to convert all input to binary
    private long maxBinaryLength = 64;     //for restricting input based on length selection
    
    /**
     * Creates new form ProgrammerGUI
     */
    public ProgrammerGUI()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        keyNot = new javax.swing.JButton();
        keyMR = new javax.swing.JButton();
        keyMS = new javax.swing.JButton();
        keyMPositive = new javax.swing.JButton();
        keyMNegative = new javax.swing.JButton();
        keyBackspace = new javax.swing.JButton();
        keyCE = new javax.swing.JButton();
        key6 = new javax.swing.JButton();
        keyMultiply = new javax.swing.JButton();
        keyReciprocal = new javax.swing.JButton();
        display = new javax.swing.JPanel();
        answer = new javax.swing.JLabel();
        calculation = new javax.swing.JLabel();
        memLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        binaryLabel = new javax.swing.JLabel();
        decimalLabel = new javax.swing.JLabel();
        keyB = new javax.swing.JButton();
        keyC = new javax.swing.JButton();
        key1 = new javax.swing.JButton();
        key2 = new javax.swing.JButton();
        key3 = new javax.swing.JButton();
        keySubract = new javax.swing.JButton();
        key0 = new javax.swing.JButton();
        keyPeriod = new javax.swing.JButton();
        keyAdd = new javax.swing.JButton();
        keyD = new javax.swing.JButton();
        keyClear = new javax.swing.JButton();
        keyE = new javax.swing.JButton();
        keyEquals = new javax.swing.JButton();
        keyF = new javax.swing.JButton();
        keyRBracket = new javax.swing.JButton();
        keyRoL = new javax.swing.JButton();
        keyXor = new javax.swing.JButton();
        keyRsh = new javax.swing.JButton();
        keyAnd = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        keyPositiveOrNegative = new javax.swing.JButton();
        keyLBracket = new javax.swing.JButton();
        keySqrt = new javax.swing.JButton();
        key7 = new javax.swing.JButton();
        keyOr = new javax.swing.JButton();
        key8 = new javax.swing.JButton();
        key9 = new javax.swing.JButton();
        keyLsh = new javax.swing.JButton();
        keyDivide = new javax.swing.JButton();
        keyPercent = new javax.swing.JButton();
        key4 = new javax.swing.JButton();
        key5 = new javax.swing.JButton();
        keyMC = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        keyA = new javax.swing.JButton();
        basePanel = new javax.swing.JPanel();
        Hex = new javax.swing.JRadioButton();
        Dec = new javax.swing.JRadioButton();
        Oct = new javax.swing.JRadioButton();
        Bin = new javax.swing.JRadioButton();
        typePanel = new javax.swing.JPanel();
        Qword = new javax.swing.JRadioButton();
        Dword = new javax.swing.JRadioButton();
        Word = new javax.swing.JRadioButton();
        Byte = new javax.swing.JRadioButton();
        keyRoR = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        View = new javax.swing.JMenu();
        standardMode = new javax.swing.JRadioButtonMenuItem();
        scientificMode = new javax.swing.JRadioButtonMenuItem();
        programmerMode = new javax.swing.JRadioButtonMenuItem();
        Edit = new javax.swing.JMenu();
        copy = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setMinimumSize(new java.awt.Dimension(570, 386));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        keyNot.setText("Not");
        keyNot.setFocusPainted(false);
        keyNot.setMaximumSize(new java.awt.Dimension(240, 160));
        keyNot.setMinimumSize(new java.awt.Dimension(30, 20));
        keyNot.setPreferredSize(new java.awt.Dimension(60, 40));
        keyNot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyNot, gridBagConstraints);

        keyMR.setText("MR");
        keyMR.setFocusPainted(false);
        keyMR.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMR.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMR.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_recall_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyMR, gridBagConstraints);

        keyMS.setText("MS");
        keyMS.setFocusPainted(false);
        keyMS.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMS.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMS.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_set_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyMS, gridBagConstraints);

        keyMPositive.setText("M+");
        keyMPositive.setFocusPainted(false);
        keyMPositive.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMPositive.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMPositive.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMPositive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_add_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyMPositive, gridBagConstraints);

        keyMNegative.setText("M-");
        keyMNegative.setFocusPainted(false);
        keyMNegative.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMNegative.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMNegative.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_subtract_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 10);
        getContentPane().add(keyMNegative, gridBagConstraints);

        keyBackspace.setText("<---");
        keyBackspace.setFocusPainted(false);
        keyBackspace.setMaximumSize(new java.awt.Dimension(240, 160));
        keyBackspace.setMinimumSize(new java.awt.Dimension(30, 20));
        keyBackspace.setPreferredSize(new java.awt.Dimension(60, 40));
        keyBackspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backspace(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyBackspace, gridBagConstraints);

        keyCE.setText("CE");
        keyCE.setFocusPainted(false);
        keyCE.setMaximumSize(new java.awt.Dimension(240, 160));
        keyCE.setMinimumSize(new java.awt.Dimension(30, 20));
        keyCE.setPreferredSize(new java.awt.Dimension(60, 40));
        keyCE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEntry(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyCE, gridBagConstraints);

        key6.setText("6");
        key6.setFocusPainted(false);
        key6.setMaximumSize(new java.awt.Dimension(240, 160));
        key6.setMinimumSize(new java.awt.Dimension(30, 20));
        key6.setPreferredSize(new java.awt.Dimension(60, 40));
        key6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key6, gridBagConstraints);

        keyMultiply.setText("*");
        keyMultiply.setFocusPainted(false);
        keyMultiply.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMultiply.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMultiply.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyMultiply, gridBagConstraints);

        keyReciprocal.setText("1/x");
        keyReciprocal.setEnabled(false);
        keyReciprocal.setFocusPainted(false);
        keyReciprocal.setMaximumSize(new java.awt.Dimension(240, 160));
        keyReciprocal.setMinimumSize(new java.awt.Dimension(30, 20));
        keyReciprocal.setPreferredSize(new java.awt.Dimension(60, 40));
        keyReciprocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(keyReciprocal, gridBagConstraints);

        display.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        answer.setBackground(new java.awt.Color(255, 255, 255));
        answer.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        answer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        answer.setText("0");

        calculation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        memLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        memLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout displayLayout = new javax.swing.GroupLayout(display);
        display.setLayout(displayLayout);
        displayLayout.setHorizontalGroup(
            displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(calculation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(displayLayout.createSequentialGroup()
                        .addComponent(memLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(answer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        displayLayout.setVerticalGroup(
            displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayLayout.createSequentialGroup()
                .addComponent(calculation, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(answer, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(memLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 493;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 10);
        getContentPane().add(display, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        binaryLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        binaryLabel.setText("0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000");

        decimalLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        decimalLabel.setText("63                                    47                                     31                                    15                                  0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(binaryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(decimalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(binaryLabel)
                .addGap(0, 0, 0)
                .addComponent(decimalLabel))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 65;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        keyB.setText("B");
        keyB.setEnabled(false);
        keyB.setFocusPainted(false);
        keyB.setMaximumSize(new java.awt.Dimension(240, 160));
        keyB.setMinimumSize(new java.awt.Dimension(30, 20));
        keyB.setPreferredSize(new java.awt.Dimension(60, 40));
        keyB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyB, gridBagConstraints);

        keyC.setText("C");
        keyC.setEnabled(false);
        keyC.setFocusPainted(false);
        keyC.setMaximumSize(new java.awt.Dimension(240, 160));
        keyC.setMinimumSize(new java.awt.Dimension(30, 20));
        keyC.setPreferredSize(new java.awt.Dimension(60, 40));
        keyC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyC, gridBagConstraints);

        key1.setText("1");
        key1.setFocusPainted(false);
        key1.setMaximumSize(new java.awt.Dimension(240, 160));
        key1.setMinimumSize(new java.awt.Dimension(30, 20));
        key1.setPreferredSize(new java.awt.Dimension(60, 40));
        key1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key1, gridBagConstraints);

        key2.setText("2");
        key2.setFocusPainted(false);
        key2.setMaximumSize(new java.awt.Dimension(240, 160));
        key2.setMinimumSize(new java.awt.Dimension(30, 20));
        key2.setPreferredSize(new java.awt.Dimension(60, 40));
        key2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key2, gridBagConstraints);

        key3.setText("3");
        key3.setFocusPainted(false);
        key3.setMaximumSize(new java.awt.Dimension(240, 160));
        key3.setMinimumSize(new java.awt.Dimension(30, 20));
        key3.setPreferredSize(new java.awt.Dimension(60, 40));
        key3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key3, gridBagConstraints);

        keySubract.setText("-");
        keySubract.setFocusPainted(false);
        keySubract.setMaximumSize(new java.awt.Dimension(240, 160));
        keySubract.setMinimumSize(new java.awt.Dimension(30, 20));
        keySubract.setPreferredSize(new java.awt.Dimension(60, 40));
        keySubract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keySubract, gridBagConstraints);

        key0.setText("0");
        key0.setFocusPainted(false);
        key0.setMaximumSize(new java.awt.Dimension(480, 160));
        key0.setMinimumSize(new java.awt.Dimension(60, 20));
        key0.setName(""); // NOI18N
        key0.setPreferredSize(new java.awt.Dimension(120, 40));
        key0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(key0, gridBagConstraints);

        keyPeriod.setText(".");
        keyPeriod.setEnabled(false);
        keyPeriod.setFocusPainted(false);
        keyPeriod.setMaximumSize(new java.awt.Dimension(240, 160));
        keyPeriod.setMinimumSize(new java.awt.Dimension(30, 20));
        keyPeriod.setPreferredSize(new java.awt.Dimension(60, 40));
        keyPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyPeriod, gridBagConstraints);

        keyAdd.setText("+");
        keyAdd.setFocusPainted(false);
        keyAdd.setMaximumSize(new java.awt.Dimension(240, 160));
        keyAdd.setMinimumSize(new java.awt.Dimension(30, 20));
        keyAdd.setPreferredSize(new java.awt.Dimension(60, 40));
        keyAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyAdd, gridBagConstraints);

        keyD.setText("D");
        keyD.setEnabled(false);
        keyD.setFocusPainted(false);
        keyD.setMaximumSize(new java.awt.Dimension(240, 160));
        keyD.setMinimumSize(new java.awt.Dimension(30, 20));
        keyD.setPreferredSize(new java.awt.Dimension(60, 40));
        keyD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyD, gridBagConstraints);

        keyClear.setText("C");
        keyClear.setFocusPainted(false);
        keyClear.setMaximumSize(new java.awt.Dimension(240, 160));
        keyClear.setMinimumSize(new java.awt.Dimension(30, 20));
        keyClear.setPreferredSize(new java.awt.Dimension(60, 40));
        keyClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyClear, gridBagConstraints);

        keyE.setText("E");
        keyE.setEnabled(false);
        keyE.setFocusPainted(false);
        keyE.setMaximumSize(new java.awt.Dimension(240, 160));
        keyE.setMinimumSize(new java.awt.Dimension(30, 20));
        keyE.setPreferredSize(new java.awt.Dimension(60, 40));
        keyE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyE, gridBagConstraints);

        keyEquals.setText("=");
        keyEquals.setFocusPainted(false);
        keyEquals.setMaximumSize(new java.awt.Dimension(240, 320));
        keyEquals.setMinimumSize(new java.awt.Dimension(30, 40));
        keyEquals.setPreferredSize(new java.awt.Dimension(60, 80));
        keyEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        getContentPane().add(keyEquals, gridBagConstraints);

        keyF.setText("F");
        keyF.setEnabled(false);
        keyF.setFocusPainted(false);
        keyF.setMaximumSize(new java.awt.Dimension(240, 160));
        keyF.setMinimumSize(new java.awt.Dimension(30, 20));
        keyF.setPreferredSize(new java.awt.Dimension(60, 40));
        keyF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyF, gridBagConstraints);

        keyRBracket.setText(")");
        keyRBracket.setEnabled(false);
        keyRBracket.setFocusPainted(false);
        keyRBracket.setMaximumSize(new java.awt.Dimension(240, 160));
        keyRBracket.setMinimumSize(new java.awt.Dimension(30, 20));
        keyRBracket.setPreferredSize(new java.awt.Dimension(60, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyRBracket, gridBagConstraints);

        keyRoL.setText("RoL");
        keyRoL.setFocusPainted(false);
        keyRoL.setMaximumSize(new java.awt.Dimension(240, 160));
        keyRoL.setMinimumSize(new java.awt.Dimension(30, 20));
        keyRoL.setPreferredSize(new java.awt.Dimension(60, 40));
        keyRoL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyRoL, gridBagConstraints);

        keyXor.setText("Xor");
        keyXor.setFocusPainted(false);
        keyXor.setMaximumSize(new java.awt.Dimension(240, 160));
        keyXor.setMinimumSize(new java.awt.Dimension(30, 20));
        keyXor.setPreferredSize(new java.awt.Dimension(60, 40));
        keyXor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyXor, gridBagConstraints);

        keyRsh.setText("Rsh");
        keyRsh.setFocusPainted(false);
        keyRsh.setMaximumSize(new java.awt.Dimension(240, 160));
        keyRsh.setMinimumSize(new java.awt.Dimension(30, 20));
        keyRsh.setPreferredSize(new java.awt.Dimension(60, 40));
        keyRsh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyRsh, gridBagConstraints);

        keyAnd.setText("And");
        keyAnd.setFocusPainted(false);
        keyAnd.setMaximumSize(new java.awt.Dimension(240, 160));
        keyAnd.setMinimumSize(new java.awt.Dimension(30, 20));
        keyAnd.setPreferredSize(new java.awt.Dimension(60, 40));
        keyAnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyAnd, gridBagConstraints);

        jButton16.setText("(");
        jButton16.setEnabled(false);
        jButton16.setMaximumSize(new java.awt.Dimension(240, 160));
        jButton16.setMinimumSize(new java.awt.Dimension(30, 20));
        jButton16.setPreferredSize(new java.awt.Dimension(60, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(jButton16, gridBagConstraints);

        keyPositiveOrNegative.setText("+/-");
        keyPositiveOrNegative.setFocusPainted(false);
        keyPositiveOrNegative.setMaximumSize(new java.awt.Dimension(240, 160));
        keyPositiveOrNegative.setMinimumSize(new java.awt.Dimension(30, 20));
        keyPositiveOrNegative.setPreferredSize(new java.awt.Dimension(60, 40));
        keyPositiveOrNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyPositiveOrNegative, gridBagConstraints);

        keyLBracket.setText("(");
        keyLBracket.setEnabled(false);
        keyLBracket.setFocusPainted(false);
        keyLBracket.setMaximumSize(new java.awt.Dimension(240, 160));
        keyLBracket.setMinimumSize(new java.awt.Dimension(30, 20));
        keyLBracket.setPreferredSize(new java.awt.Dimension(60, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyLBracket, gridBagConstraints);

        keySqrt.setText("sqrt");
        keySqrt.setEnabled(false);
        keySqrt.setFocusPainted(false);
        keySqrt.setMaximumSize(new java.awt.Dimension(240, 160));
        keySqrt.setMinimumSize(new java.awt.Dimension(30, 20));
        keySqrt.setPreferredSize(new java.awt.Dimension(60, 40));
        keySqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(keySqrt, gridBagConstraints);

        key7.setText("7");
        key7.setFocusPainted(false);
        key7.setMaximumSize(new java.awt.Dimension(240, 160));
        key7.setMinimumSize(new java.awt.Dimension(30, 20));
        key7.setPreferredSize(new java.awt.Dimension(60, 40));
        key7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key7, gridBagConstraints);

        keyOr.setText("Or");
        keyOr.setFocusPainted(false);
        keyOr.setMaximumSize(new java.awt.Dimension(240, 160));
        keyOr.setMinimumSize(new java.awt.Dimension(30, 20));
        keyOr.setPreferredSize(new java.awt.Dimension(60, 40));
        keyOr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyOr, gridBagConstraints);

        key8.setText("8");
        key8.setFocusPainted(false);
        key8.setMaximumSize(new java.awt.Dimension(240, 160));
        key8.setMinimumSize(new java.awt.Dimension(30, 20));
        key8.setPreferredSize(new java.awt.Dimension(60, 40));
        key8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key8, gridBagConstraints);

        key9.setText("9");
        key9.setFocusPainted(false);
        key9.setMaximumSize(new java.awt.Dimension(240, 160));
        key9.setMinimumSize(new java.awt.Dimension(30, 20));
        key9.setPreferredSize(new java.awt.Dimension(60, 40));
        key9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key9, gridBagConstraints);

        keyLsh.setText("Lsh");
        keyLsh.setFocusPainted(false);
        keyLsh.setMaximumSize(new java.awt.Dimension(240, 160));
        keyLsh.setMinimumSize(new java.awt.Dimension(30, 20));
        keyLsh.setPreferredSize(new java.awt.Dimension(60, 40));
        keyLsh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyLsh, gridBagConstraints);

        keyDivide.setText("/");
        keyDivide.setFocusPainted(false);
        keyDivide.setMaximumSize(new java.awt.Dimension(240, 160));
        keyDivide.setMinimumSize(new java.awt.Dimension(30, 20));
        keyDivide.setPreferredSize(new java.awt.Dimension(60, 40));
        keyDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyDivide, gridBagConstraints);

        keyPercent.setText("%");
        keyPercent.setEnabled(false);
        keyPercent.setFocusPainted(false);
        keyPercent.setMaximumSize(new java.awt.Dimension(240, 160));
        keyPercent.setMinimumSize(new java.awt.Dimension(30, 20));
        keyPercent.setPreferredSize(new java.awt.Dimension(60, 40));
        keyPercent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(keyPercent, gridBagConstraints);

        key4.setText("4");
        key4.setFocusPainted(false);
        key4.setMaximumSize(new java.awt.Dimension(240, 160));
        key4.setMinimumSize(new java.awt.Dimension(30, 20));
        key4.setPreferredSize(new java.awt.Dimension(60, 40));
        key4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key4, gridBagConstraints);

        key5.setText("5");
        key5.setFocusPainted(false);
        key5.setMaximumSize(new java.awt.Dimension(240, 160));
        key5.setMinimumSize(new java.awt.Dimension(30, 20));
        key5.setPreferredSize(new java.awt.Dimension(60, 40));
        key5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key5, gridBagConstraints);

        keyMC.setText("MC");
        keyMC.setFocusPainted(false);
        keyMC.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMC.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMC.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_clear_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyMC, gridBagConstraints);

        jButton25.setEnabled(false);
        jButton25.setFocusPainted(false);
        jButton25.setMaximumSize(new java.awt.Dimension(240, 160));
        jButton25.setMinimumSize(new java.awt.Dimension(30, 20));
        jButton25.setPreferredSize(new java.awt.Dimension(60, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(jButton25, gridBagConstraints);

        jButton31.setText("Mod");
        jButton31.setFocusPainted(false);
        jButton31.setMaximumSize(new java.awt.Dimension(240, 160));
        jButton31.setMinimumSize(new java.awt.Dimension(30, 20));
        jButton31.setPreferredSize(new java.awt.Dimension(60, 40));
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(jButton31, gridBagConstraints);

        keyA.setText("A");
        keyA.setEnabled(false);
        keyA.setFocusPainted(false);
        keyA.setMaximumSize(new java.awt.Dimension(240, 160));
        keyA.setMinimumSize(new java.awt.Dimension(30, 20));
        keyA.setPreferredSize(new java.awt.Dimension(60, 40));
        keyA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyA, gridBagConstraints);

        basePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        basePanel.setLayout(new java.awt.GridLayout(4, 1));

        Hex.setText("Hex");
        Hex.setFocusPainted(false);
        Hex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hex_handler(evt);
            }
        });
        basePanel.add(Hex);

        Dec.setSelected(true);
        Dec.setText("Dec");
        Dec.setFocusPainted(false);
        Dec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dec_handler(evt);
            }
        });
        basePanel.add(Dec);

        Oct.setText("Oct");
        Oct.setFocusPainted(false);
        Oct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oct_handler(evt);
            }
        });
        basePanel.add(Oct);

        Bin.setText("Bin");
        Bin.setFocusPainted(false);
        Bin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bin_handler(evt);
            }
        });
        basePanel.add(Bin);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 24;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        getContentPane().add(basePanel, gridBagConstraints);

        typePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        typePanel.setLayout(new java.awt.GridLayout(4, 1));

        Qword.setSelected(true);
        Qword.setText("Qword");
        Qword.setFocusPainted(false);
        Qword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qword_handler(evt);
            }
        });
        typePanel.add(Qword);

        Dword.setText("Dword");
        Dword.setFocusPainted(false);
        Dword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dword_handler(evt);
            }
        });
        typePanel.add(Dword);

        Word.setText("Word");
        Word.setFocusPainted(false);
        Word.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                word_handler(evt);
            }
        });
        typePanel.add(Word);

        Byte.setText("Byte");
        Byte.setFocusPainted(false);
        Byte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                byte_handler(evt);
            }
        });
        typePanel.add(Byte);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        getContentPane().add(typePanel, gridBagConstraints);

        keyRoR.setText("RoR");
        keyRoR.setFocusPainted(false);
        keyRoR.setMaximumSize(new java.awt.Dimension(240, 160));
        keyRoR.setMinimumSize(new java.awt.Dimension(30, 20));
        keyRoR.setPreferredSize(new java.awt.Dimension(60, 40));
        keyRoR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyRoR, gridBagConstraints);

        View.setText("View");

        standardMode.setText("Standard");
        standardMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standard_handler(evt);
            }
        });
        View.add(standardMode);

        scientificMode.setText("Scienific");
        scientificMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                science_handler(evt);
            }
        });
        View.add(scientificMode);

        programmerMode.setSelected(true);
        programmerMode.setText("Programmer");
        View.add(programmerMode);

        MenuBar.add(View);

        Edit.setText("Edit");

        copy.setText("Copy");
        Edit.add(copy);

        paste.setText("Paste");
        Edit.add(paste);

        MenuBar.add(Edit);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //------------------------------backspace------------------------------
    private void backspace(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backspace
        if(answer.getText().length() > 1)
        {
            answer.setText(answer.getText().substring(0, answer.getText().length() - 1));
        }
        else
        {
            answer.setText("0");
        }
    }//GEN-LAST:event_backspace
    //------------------------------clearEntry------------------------------
    private void clearEntry(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEntry
        answer.setText("0");
    }//GEN-LAST:event_clearEntry
    //------------------------------clear------------------------------
    private void clear(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear
        calculationString = "";
        calculation.setText("");
        answer.setText("0");
        number1 = 0;
        operator = NO_OP;
        strBinary = "";
    }//GEN-LAST:event_clear
    //------------------------------op_handler------------------------------
    private void op_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op_handler
        String operator = evt.getActionCommand();
        String result = "";
        
        //prevents bug that converts binary value as a decimal
        if(Bin.isSelected())
        {
            strBinary = answer.getText();
        }
        else
        {
            //get the input and convert stright to binary
            strBinary = Long.toBinaryString(Long.parseLong(answer.getText()));
        }
        
        switch(operator)
        {
            case "+":
                result = opAdd(strBinary);
                break;
            case "-":
                result = opSubtract(strBinary);
                break;
            case "*":
                result = opMultiply(strBinary);
                break;
            case "/":
                result = opDivide(strBinary);
                break;
            case "=":
                result = opEquals(strBinary);
                //only set it if calculated result
                strBinary = result;     //get result in binary
                break;
            case "Mod":
                result = opMod(strBinary);
                break;
            case "Or":
                result = opOr(strBinary);
                break;
            case "Xor":
                result = opXor(strBinary);
                break;
            case "Lsh":
                result = opLsh(strBinary);
                break;
            case "Rsh":
                result = opRsh(strBinary);
                break;
            case "And":
                result = opAnd(strBinary);
                break;
        }
        
        answer.setText(conversion(strBinary));    //convert and set text
        readyForNextNumber = true;
    }//GEN-LAST:event_op_handler
    //------------------------------negate------------------------------
    private void negate(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negate
        if(answer.getText().startsWith("-"))
        {
            answer.setText(answer.getText().substring(1, answer.getText().length()));
        }
        else
        {
            answer.setText("-" + answer.getText());
        }
    }//GEN-LAST:event_negate
    //------------------------------op_uni_handler------------------------------
    private void op_uni_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op_uni_handler
        String operator = evt.getActionCommand();
        String result = "";
        
        //prevents bug that converts binary value as a decimal
        if(Bin.isSelected())
        {
            strBinary = answer.getText();
        }
        else
        {
            //get the input and convert stright to binary
            strBinary = Long.toBinaryString(Long.parseLong(answer.getText()));
        }
        
        switch(operator)
        {
            case "RoL":
                result = opRoL(strBinary);
                break;
            case "RoR":
                result = opRoR(strBinary);
                break;
            case "Not":
                result = opNot(strBinary);
                break;
        }
        
        strBinary = result;     //result is already in binary
        answer.setText(conversion(strBinary));    //convert and set text
    }//GEN-LAST:event_op_uni_handler
    //------------------------------number_handler------------------------------
    private void number_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number_handler
        if(readyForNextNumber)
        {
            answer.setText(evt.getActionCommand());
            readyForNextNumber = false;
        }
        else
        {
            answer.setText(answer.getText() + evt.getActionCommand().charAt(0));
        }
        if(answer.getText().startsWith("0") && answer.getText() != "0")
        {
            answer.setText(answer.getText().substring(1, answer.getText().length()));
        }
        
        //if input contains any hex characters, convert to base 10 first
        if(answer.getText().contains("A") || answer.getText().contains("B") || answer.getText().contains("C") || 
                answer.getText().contains("D") || answer.getText().contains("E") || answer.getText().contains("F"))
        {
            long tempNum = Long.parseLong(answer.getText(), 16);   //converts to base 10
            strBinary = Long.toBinaryString(tempNum);        //and then binary
        }
        else
        {
            //prevents bug that converts binary value as a decimal
            if(Bin.isSelected())
            {
                strBinary = answer.getText();     //get regular
            }
            else
            {
                //get the input and convert straight to binary
                strBinary = Long.toBinaryString(Long.parseLong(answer.getText()));
            }
        }
    }//GEN-LAST:event_number_handler
    //------------------------------standard_handler------------------------------
    private void standard_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standard_handler
        new StandardGUI().setVisible(true);        //start up the programmer mode
        this.dispose();     //close the other form
    }//GEN-LAST:event_standard_handler
    //------------------------------science_handler------------------------------
    private void science_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_science_handler
        new ScientificGUI().setVisible(true);        //start up the programmer mode
        this.dispose();     //close the other form
    }//GEN-LAST:event_science_handler
    //------------------------------hex_handler------------------------------
    private void hex_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hex_handler
        Hex.setSelected(true);
        Dec.setSelected(false);
        Oct.setSelected(false);
        Bin.setSelected(false);
        key2.setEnabled(true);
        key3.setEnabled(true);
        key4.setEnabled(true);
        key5.setEnabled(true);
        key6.setEnabled(true);
        key7.setEnabled(true);
        key8.setEnabled(true);
        key9.setEnabled(true);
        keyA.setEnabled(true);
        keyB.setEnabled(true);
        keyC.setEnabled(true);
        keyD.setEnabled(true);
        keyE.setEnabled(true);
        keyF.setEnabled(true);
        
        answer.setText(conversion(strBinary));        //convert and set text
    }//GEN-LAST:event_hex_handler
    //------------------------------dec_handler------------------------------
    private void dec_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dec_handler
        Hex.setSelected(false);
        Dec.setSelected(true);
        Oct.setSelected(false);
        Bin.setSelected(false);
        key2.setEnabled(true);
        key3.setEnabled(true);
        key4.setEnabled(true);
        key5.setEnabled(true);
        key6.setEnabled(true);
        key7.setEnabled(true);
        key8.setEnabled(true);
        key9.setEnabled(true);
        keyA.setEnabled(false);
        keyB.setEnabled(false);
        keyC.setEnabled(false);
        keyD.setEnabled(false);
        keyE.setEnabled(false);
        keyF.setEnabled(false);
        
        answer.setText(conversion(strBinary));        //convert and set text
    }//GEN-LAST:event_dec_handler
    //------------------------------oct_handler------------------------------
    private void oct_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oct_handler
        Hex.setSelected(false);
        Dec.setSelected(false);
        Oct.setSelected(true);
        Bin.setSelected(false);
        key2.setEnabled(true);
        key3.setEnabled(true);
        key4.setEnabled(true);
        key5.setEnabled(true);
        key6.setEnabled(true);
        key7.setEnabled(true);
        key8.setEnabled(false);
        key9.setEnabled(false);
        keyA.setEnabled(false);
        keyB.setEnabled(false);
        keyC.setEnabled(false);
        keyD.setEnabled(false);
        keyE.setEnabled(false);
        keyF.setEnabled(false);
        
        answer.setText(conversion(strBinary));        //convert and set text
    }//GEN-LAST:event_oct_handler
    //------------------------------bin_handler------------------------------
    private void bin_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bin_handler
        Hex.setSelected(false);
        Dec.setSelected(false);
        Oct.setSelected(false);
        Bin.setSelected(true);
        key2.setEnabled(false);
        key3.setEnabled(false);
        key4.setEnabled(false);
        key5.setEnabled(false);
        key6.setEnabled(false);
        key7.setEnabled(false);
        key8.setEnabled(false);
        key9.setEnabled(false);
        keyA.setEnabled(false);
        keyB.setEnabled(false);
        keyC.setEnabled(false);
        keyD.setEnabled(false);
        keyE.setEnabled(false);
        keyF.setEnabled(false);
        
        answer.setText(conversion(strBinary));        //convert and set text
    }//GEN-LAST:event_bin_handler
    //------------------------------qword_handler------------------------------
    private void qword_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qword_handler
        Qword.setSelected(true);
        Dword.setSelected(false);
        Word.setSelected(false);
        Byte.setSelected(false);
        maxBinaryLength = 64;
        binaryLabel.setText("0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000");
        decimalLabel.setText("63                                    47                                     31");
        decimalLabel.setText(decimalLabel.getText() + "                                    15                                  0");
    }//GEN-LAST:event_qword_handler
    //------------------------------dword_handler------------------------------
    private void dword_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dword_handler
        Qword.setSelected(false);
        Dword.setSelected(true);
        Word.setSelected(false);
        Byte.setSelected(false);
        maxBinaryLength = 32;
        binaryLabel.setText("0000 0000 0000 0000 0000 0000 0000 0000");
        decimalLabel.setText("31                                    15                                  0");
    }//GEN-LAST:event_dword_handler
    //------------------------------word_handler------------------------------
    private void word_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_word_handler
        Qword.setSelected(false);
        Dword.setSelected(false);
        Word.setSelected(true);
        Byte.setSelected(false);
        maxBinaryLength = 16;
        binaryLabel.setText("0000 0000 0000 0000");
        decimalLabel.setText("15                                  0");
    }//GEN-LAST:event_word_handler
    //------------------------------byte_handler------------------------------
    private void byte_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byte_handler
        Qword.setSelected(false);
        Dword.setSelected(false);
        Word.setSelected(false);
        Byte.setSelected(true);
        maxBinaryLength = 8;
        binaryLabel.setText("0000 0000");
        decimalLabel.setText("                 0");
    }//GEN-LAST:event_byte_handler

    private void mem_clear_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_clear_handler
        mem = 0;
        memLabel.setText("");
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_clear_handler

    private void mem_recall_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_recall_handler
        //convet mem to the specified base and set it to answer.text
        answer.setText(conversion(Long.toString(mem)));
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_recall_handler

    private void mem_set_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_set_handler
        if(Hex.isSelected())
        {
            //convert answer.text to base 10 and then that mem as binary
            mem = parseNumber(Long.toBinaryString(Long.parseLong(answer.getText(), 16)));
        }
        if(Dec.isSelected())
        {
            //convert answer.text to base 10 and then that mem as binary
            mem = parseNumber(Long.toBinaryString(Long.parseLong(answer.getText(), 10)));
        }
        if(Oct.isSelected())
        {
            //convert answer.text to base 10 and then that mem as binary
            mem = parseNumber(Long.toBinaryString(Long.parseLong(answer.getText(), 8)));
        }
        if(Bin.isSelected())
        {
            //convert answer.text to base 10 and then that mem as binary
            mem = parseNumber(Long.toBinaryString(Long.parseLong(answer.getText(), 2)));
        }
        
        memLabel.setText("M");
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_set_handler

    private void mem_add_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_add_handler
        //convert temp to mem, base 10
        Long temp = Long.parseLong(Long.toString(mem), 2);   //binary to base 10
        
        //do math based to the base selected
        if(Hex.isSelected())
        {
            //convert answer.text to base 10 and then add it to temp
            temp += Long.parseLong(answer.getText(), 16);
        }
        if(Dec.isSelected())
        {
            //convert answer.text to base 10 and then add it to temp
            temp += Long.parseLong(answer.getText(), 10);
        }
        if(Oct.isSelected())
        {
            //convert answer.text to base 10 and then add it to temp
            temp += Long.parseLong(answer.getText(), 8);
        }
        if(Bin.isSelected())
        {
            //convert answer.text to base 10 and then add it to temp
            temp += Long.parseLong(answer.getText(), 2);
        }
        
        //convert to binary again
        mem = parseNumber(Long.toBinaryString(temp));
        
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_add_handler

    private void mem_subtract_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_subtract_handler
        //convert temp to mem, base 10
        Long temp = Long.parseLong(Long.toString(mem), 2);   //binary to base 10
        
        //do math based to the base selected
        if(Hex.isSelected())
        {
            //convert answer.text to base 10 and then add it to temp
            temp -= Long.parseLong(answer.getText(), 16);
        }
        if(Dec.isSelected())
        {
            //convert answer.text to base 10 and then add it to temp
            temp -= Long.parseLong(answer.getText(), 10);
        }
        if(Oct.isSelected())
        {
            //convert answer.text to base 10 and then add it to temp
            temp -= Long.parseLong(answer.getText(), 8);
        }
        if(Bin.isSelected())
        {
            //convert answer.text to base 10 and then add it to temp
            temp -= Long.parseLong(answer.getText(), 2);
        }
        
        //convert to binary again
        mem = parseNumber(Long.toBinaryString(temp));
        
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_subtract_handler
    //------------------------------opEquals------------------------------
    public String opEquals(String number)
    {
        long result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = NO_OP;
        
        calculationString = "";
        calculation.setText(calculationString);

        number1 = result;

        return Long.toString(result);
    }
    //------------------------------opAdd------------------------------
    public String opAdd(String number)
    {
        long result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = PLUS;
        
        calculationString += (answer.getText() + " + ");
        calculation.setText(calculationString);

        number1 = result;

        return Long.toString(result);
    }
    //------------------------------opSubtract------------------------------
    public String opSubtract(String number)
    {
        long result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = SUBTRACT;
        
        calculationString += (answer.getText() + " - ");
        calculation.setText(calculationString);

        number1 = result;

        return Long.toString(result);
    }
    //------------------------------opMultiply------------------------------
    public String opMultiply(String number)
    {
        long result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = MULTIPLY;

        calculationString += (answer.getText() + " * ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Long.toString(result);
    }
    //------------------------------opDivide------------------------------
    public String opDivide(String number)
    {
        long result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = DIVIDE;
        
        calculationString += (answer.getText() + " / ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Long.toString(result);
    }
    //------------------------------opMod------------------------------
    public String opMod(String number)
    {
        long result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = MOD;
        
        calculationString += (answer.getText() + " Mod ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Long.toString(result);
    }
    //------------------------------opRoL------------------------------
    public String opRoL(String number)
    {
        long result;
        String temp = operator;     //remember the last operator
        operator = ROL;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before

        return Long.toString(result);
    }
    //------------------------------opRoR------------------------------
    public String opRoR(String number)
    {
        long result;
        String temp = operator;     //remember the last operator
        operator = ROR;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before

        return Long.toString(result);
    }
    //------------------------------opOr------------------------------
    public String opOr(String number)
    {
        long result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = OR;
        
        calculationString += (answer.getText() + " Or ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Long.toString(result);
    }
    //------------------------------opXor------------------------------
    public String opXor(String number)
    {
        long result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = XOR;
        
        calculationString += (answer.getText() + " Xor ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Long.toString(result);
    }
    //------------------------------opLsh------------------------------
    public String opLsh(String number)
    {
        long result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = LSH;
        
        calculationString += (answer.getText() + " Lsh ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Long.toString(result);
    }
    //------------------------------opRsh------------------------------
    public String opRsh(String number)
    {
        long result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = RSH;
        
        calculationString += (answer.getText() + " Rsh ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Long.toString(result);
    }
    //------------------------------opNot------------------------------
    public String opNot(String number)
    {
        long result;
        String temp = operator;     //remember the last operator
        operator = NOT;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before

        return Long.toString(result);
    }
    //------------------------------opAnd------------------------------
    public String opAnd(String number)
    {
        long result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = AND;
        
        calculationString += (answer.getText() + " And ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Long.toString(result);
    }
    //------------------------------perfomOperation------------------------------
    private long performOperation(long number2)
    {
        long result = 0;
        
        //convert number1 and number2 to decimal for calculation
        long tempNum1 = number1;
        String temp1 = Long.toString(tempNum1);
        tempNum1 = Long.parseLong(temp1, 2);
        long tempNum2 = number2;
        String temp2 = Long.toString(tempNum2);
        tempNum2 = Long.parseLong(temp2, 2);
        
        switch(operator)
        {
            case PLUS:
                result = tempNum1 + tempNum2;
                break;
            case SUBTRACT:
                result = tempNum1 - tempNum2;
                break;
            case MULTIPLY:
                result = tempNum1 * tempNum2;
                break;
            case DIVIDE:
                result = tempNum1 / tempNum2;
                break;
            case MOD:
                result = tempNum1 % tempNum2;
                break;
            case ROL:
                result = tempNum2 << 1;
                break;
            case ROR:
                result = tempNum2 >> 1;
                break;
            case OR:
                result = tempNum1 | tempNum2;
                break;
            case XOR:
                result = tempNum1 ^ tempNum2;
                break;
            case LSH:
                for(int i = 0; i < tempNum2; i++)
                {
                    tempNum1 *= 2;
                }
                result = tempNum1;
                break;
            case RSH:
                for(int i = 0; i < tempNum2; i++)
                {
                    tempNum1 /= 2;
                }
                result = tempNum1;
                break;
            case NOT:
                result = ~tempNum2;
                break;
            case AND:
                result = tempNum1 & tempNum2;
                break;
        }
        //converting result back to binary
        String tempResult = Long.toBinaryString(result);
        result = Long.parseLong(tempResult);

        return result;
    }
    //------------------------------parseNumber------------------------------
    private static long parseNumber(String number)
    {
        long result;

        //convert string to long
        result = Long.parseLong(number);

        return result;
    }
    //------------------------------conversion------------------------------
    private String conversion(String str)
    {
        long number = Long.parseLong(str);     //put the passed string into long
        long tempNum = 0;
        String temp = "";
        
        //if hexidecimal
        if(Hex.isSelected())
        {
            tempNum = Long.parseLong(str, 2);   //binary to base 10
            temp = Long.toString(tempNum, 16);  //base 10 to 16
        }
        //if decimal
        if(Dec.isSelected())
        {
            tempNum = Long.parseLong(str, 2);   //binary to base 10
            temp = Long.toString(tempNum, 10);  //base 10 to 10
        }
        //if octal
        if(Oct.isSelected())
        {
            tempNum = Long.parseLong(str, 2);   //binary to base 10
            temp = Long.toString(tempNum, 8);  //base 10 to 8
        }
        //if binary
        if(Bin.isSelected())
        {
            tempNum = Long.parseLong(str, 2);   //binary to base 10
            temp = Long.toString(tempNum, 2);  //base 10 to 2
        }
        
        return temp.toUpperCase(); //set all to uppercase;
    }
    //------------------------------checkLength------------------------------
    private boolean checkBinaryLength(long number)
    {
        String temp;
        temp = Long.toBinaryString(number);
        
        if(temp.length() <= maxBinaryLength)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    //------------------------------main------------------------------
    private void changeBinaryLabel()
    {
        //set binaryLabel to the answer.text
//        binaryLabel.setText(strBinary);
    }
    //------------------------------main------------------------------
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProgrammerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProgrammerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProgrammerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProgrammerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ProgrammerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Bin;
    private javax.swing.JRadioButton Byte;
    private javax.swing.JRadioButton Dec;
    private javax.swing.JRadioButton Dword;
    private javax.swing.JMenu Edit;
    private javax.swing.JRadioButton Hex;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JRadioButton Oct;
    private javax.swing.JRadioButton Qword;
    private javax.swing.JMenu View;
    private javax.swing.JRadioButton Word;
    private javax.swing.JLabel answer;
    private javax.swing.JPanel basePanel;
    private javax.swing.JLabel binaryLabel;
    private javax.swing.JLabel calculation;
    private javax.swing.JMenuItem copy;
    private javax.swing.JLabel decimalLabel;
    private javax.swing.JPanel display;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton31;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton key0;
    private javax.swing.JButton key1;
    private javax.swing.JButton key2;
    private javax.swing.JButton key3;
    private javax.swing.JButton key4;
    private javax.swing.JButton key5;
    private javax.swing.JButton key6;
    private javax.swing.JButton key7;
    private javax.swing.JButton key8;
    private javax.swing.JButton key9;
    private javax.swing.JButton keyA;
    private javax.swing.JButton keyAdd;
    private javax.swing.JButton keyAnd;
    private javax.swing.JButton keyB;
    private javax.swing.JButton keyBackspace;
    private javax.swing.JButton keyC;
    private javax.swing.JButton keyCE;
    private javax.swing.JButton keyClear;
    private javax.swing.JButton keyD;
    private javax.swing.JButton keyDivide;
    private javax.swing.JButton keyE;
    private javax.swing.JButton keyEquals;
    private javax.swing.JButton keyF;
    private javax.swing.JButton keyLBracket;
    private javax.swing.JButton keyLsh;
    private javax.swing.JButton keyMC;
    private javax.swing.JButton keyMNegative;
    private javax.swing.JButton keyMPositive;
    private javax.swing.JButton keyMR;
    private javax.swing.JButton keyMS;
    private javax.swing.JButton keyMultiply;
    private javax.swing.JButton keyNot;
    private javax.swing.JButton keyOr;
    private javax.swing.JButton keyPercent;
    private javax.swing.JButton keyPeriod;
    private javax.swing.JButton keyPositiveOrNegative;
    private javax.swing.JButton keyRBracket;
    private javax.swing.JButton keyReciprocal;
    private javax.swing.JButton keyRoL;
    private javax.swing.JButton keyRoR;
    private javax.swing.JButton keyRsh;
    private javax.swing.JButton keySqrt;
    private javax.swing.JButton keySubract;
    private javax.swing.JButton keyXor;
    private javax.swing.JLabel memLabel;
    private javax.swing.JMenuItem paste;
    private javax.swing.JRadioButtonMenuItem programmerMode;
    private javax.swing.JRadioButtonMenuItem scientificMode;
    private javax.swing.JRadioButtonMenuItem standardMode;
    private javax.swing.JPanel typePanel;
    // End of variables declaration//GEN-END:variables
}
