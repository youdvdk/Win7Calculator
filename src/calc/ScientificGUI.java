/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calc;

import static java.lang.Math.*;

/**
 *
 * @author David van de Kamp
 */
public class ScientificGUI extends javax.swing.JFrame 
{
    private static final String NO_OP = "\0";
    private static final String PLUS = "+";
    private static final String SUBTRACT = "-";
    private static final String MULTIPLY = "*";
    private static final String DIVIDE = "/";
    private static final String SQRT = "sqrt";
    private static final String PRCNT = "%";
    private static final String RCPRCL = "1/x";
    private static final String FCT = "n!";
    private static final String YRTX = "y rt(x";
    private static final String CRTX = "3 rt(x";
    private static final String POW10 = "10^x";
    private static final String XPOW2 = "x^2";
    private static final String XPOWY = "x^y";
    private static final String XPOW3 = "x^3";
    private static final String LOG = "log";
    private static final String LN = "ln";
    private static final String SIND = "sind";
    private static final String SINR = "sinr";
    private static final String SING = "sing";
    private static final String COSD = "cosd";
    private static final String COSR = "cosr";
    private static final String COSG = "cosg";
    private static final String TAND = "tand";
    private static final String TANR = "tanr";
    private static final String TANG = "tang";
    private static final String SINH = "sinh";
    private static final String COSH = "cosh";
    private static final String TANH = "tanh";
    private static final String MOD = "Mod";
    private static final String EXP = "Exp";
    private static final String INT = "Int";
    private static final String DMS = "dms";
    private static final String F_E = "F-E";
    
    private double number1 = 0;
    private String operator = NO_OP;
    private boolean readyForNextNumber;
    private String calculationString = "";
    private double mem = 0;

    /**
     * Creates new form ScientificGUI
     */
    public ScientificGUI() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        keyReciprocal = new javax.swing.JButton();
        display = new javax.swing.JPanel();
        answer = new javax.swing.JLabel();
        calculation = new javax.swing.JLabel();
        memLabel = new javax.swing.JLabel();
        key1 = new javax.swing.JButton();
        key2 = new javax.swing.JButton();
        key3 = new javax.swing.JButton();
        keySubract = new javax.swing.JButton();
        key0 = new javax.swing.JButton();
        keyPeriod = new javax.swing.JButton();
        keyAdd = new javax.swing.JButton();
        keyClear = new javax.swing.JButton();
        keyEquals = new javax.swing.JButton();
        keyPositiveOrNegative = new javax.swing.JButton();
        keySqrt = new javax.swing.JButton();
        key7 = new javax.swing.JButton();
        key8 = new javax.swing.JButton();
        key9 = new javax.swing.JButton();
        keyDivide = new javax.swing.JButton();
        keyPercent = new javax.swing.JButton();
        key4 = new javax.swing.JButton();
        key5 = new javax.swing.JButton();
        keyMC = new javax.swing.JButton();
        keyMR = new javax.swing.JButton();
        keyMS = new javax.swing.JButton();
        keyMPositive = new javax.swing.JButton();
        keyMNegative = new javax.swing.JButton();
        keyBackspace = new javax.swing.JButton();
        keyCE = new javax.swing.JButton();
        key6 = new javax.swing.JButton();
        keyMultiply = new javax.swing.JButton();
        keyRBracket = new javax.swing.JButton();
        keyFactorial = new javax.swing.JButton();
        keyYSqrtX = new javax.swing.JButton();
        key3SqrtX = new javax.swing.JButton();
        keyTenPowerX = new javax.swing.JButton();
        keyLBracket = new javax.swing.JButton();
        keyXPower2 = new javax.swing.JButton();
        keyXPowerY = new javax.swing.JButton();
        keyXPower3 = new javax.swing.JButton();
        keyLog = new javax.swing.JButton();
        keyInv = new javax.swing.JButton();
        keyln = new javax.swing.JButton();
        keySinH = new javax.swing.JButton();
        keySin = new javax.swing.JButton();
        keyCosH = new javax.swing.JButton();
        keyCos = new javax.swing.JButton();
        keyTanH = new javax.swing.JButton();
        keyTan = new javax.swing.JButton();
        keyExp = new javax.swing.JButton();
        keyMod = new javax.swing.JButton();
        keyBlank = new javax.swing.JButton();
        keyInt = new javax.swing.JButton();
        keyDms = new javax.swing.JButton();
        keyPI = new javax.swing.JButton();
        RadiosPanel = new javax.swing.JPanel();
        Degrees = new javax.swing.JRadioButton();
        Radians = new javax.swing.JRadioButton();
        Grads = new javax.swing.JRadioButton();
        keyFE = new javax.swing.JToggleButton();
        MenuBar = new javax.swing.JMenuBar();
        View = new javax.swing.JMenu();
        standardMode = new javax.swing.JRadioButtonMenuItem();
        scientificMode = new javax.swing.JRadioButtonMenuItem();
        programmerMode = new javax.swing.JRadioButtonMenuItem();
        Edit = new javax.swing.JMenu();
        copy = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setMinimumSize(new java.awt.Dimension(620, 350));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        keyReciprocal.setText("1/x");
        keyReciprocal.setFocusPainted(false);
        keyReciprocal.setMaximumSize(new java.awt.Dimension(240, 160));
        keyReciprocal.setMinimumSize(new java.awt.Dimension(30, 20));
        keyReciprocal.setPreferredSize(new java.awt.Dimension(60, 40));
        keyReciprocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(keyReciprocal, gridBagConstraints);

        display.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        answer.setBackground(new java.awt.Color(255, 255, 255));
        answer.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        answer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        answer.setText("0");

        calculation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        memLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        memLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout displayLayout = new javax.swing.GroupLayout(display);
        display.setLayout(displayLayout);
        displayLayout.setHorizontalGroup(
            displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calculation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(displayLayout.createSequentialGroup()
                        .addComponent(memLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(answer, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)))
                .addContainerGap())
        );
        displayLayout.setVerticalGroup(
            displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayLayout.createSequentialGroup()
                .addComponent(calculation, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(answer, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(memLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 543;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(display, gridBagConstraints);

        key1.setText("1");
        key1.setFocusPainted(false);
        key1.setMaximumSize(new java.awt.Dimension(240, 160));
        key1.setMinimumSize(new java.awt.Dimension(30, 20));
        key1.setPreferredSize(new java.awt.Dimension(60, 40));
        key1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key1, gridBagConstraints);

        key2.setText("2");
        key2.setFocusPainted(false);
        key2.setMaximumSize(new java.awt.Dimension(240, 160));
        key2.setMinimumSize(new java.awt.Dimension(30, 20));
        key2.setPreferredSize(new java.awt.Dimension(60, 40));
        key2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key2, gridBagConstraints);

        key3.setText("3");
        key3.setFocusPainted(false);
        key3.setMaximumSize(new java.awt.Dimension(240, 160));
        key3.setMinimumSize(new java.awt.Dimension(30, 20));
        key3.setPreferredSize(new java.awt.Dimension(60, 40));
        key3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key3, gridBagConstraints);

        keySubract.setText("-");
        keySubract.setFocusPainted(false);
        keySubract.setMaximumSize(new java.awt.Dimension(240, 160));
        keySubract.setMinimumSize(new java.awt.Dimension(30, 20));
        keySubract.setPreferredSize(new java.awt.Dimension(60, 40));
        keySubract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keySubract, gridBagConstraints);

        key0.setText("0");
        key0.setFocusPainted(false);
        key0.setMaximumSize(new java.awt.Dimension(480, 160));
        key0.setMinimumSize(new java.awt.Dimension(60, 20));
        key0.setName(""); // NOI18N
        key0.setPreferredSize(new java.awt.Dimension(120, 40));
        key0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(key0, gridBagConstraints);

        keyPeriod.setText(".");
        keyPeriod.setFocusPainted(false);
        keyPeriod.setMaximumSize(new java.awt.Dimension(240, 160));
        keyPeriod.setMinimumSize(new java.awt.Dimension(30, 20));
        keyPeriod.setPreferredSize(new java.awt.Dimension(60, 40));
        keyPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyPeriod, gridBagConstraints);

        keyAdd.setText("+");
        keyAdd.setFocusPainted(false);
        keyAdd.setMaximumSize(new java.awt.Dimension(240, 160));
        keyAdd.setMinimumSize(new java.awt.Dimension(30, 20));
        keyAdd.setPreferredSize(new java.awt.Dimension(60, 40));
        keyAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyAdd, gridBagConstraints);

        keyClear.setText("C");
        keyClear.setFocusPainted(false);
        keyClear.setMaximumSize(new java.awt.Dimension(240, 160));
        keyClear.setMinimumSize(new java.awt.Dimension(30, 20));
        keyClear.setPreferredSize(new java.awt.Dimension(60, 40));
        keyClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyClear, gridBagConstraints);

        keyEquals.setText("=");
        keyEquals.setFocusPainted(false);
        keyEquals.setMaximumSize(new java.awt.Dimension(240, 320));
        keyEquals.setMinimumSize(new java.awt.Dimension(30, 40));
        keyEquals.setPreferredSize(new java.awt.Dimension(60, 80));
        keyEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        getContentPane().add(keyEquals, gridBagConstraints);

        keyPositiveOrNegative.setText("+/-");
        keyPositiveOrNegative.setFocusPainted(false);
        keyPositiveOrNegative.setMaximumSize(new java.awt.Dimension(240, 160));
        keyPositiveOrNegative.setMinimumSize(new java.awt.Dimension(30, 20));
        keyPositiveOrNegative.setPreferredSize(new java.awt.Dimension(60, 40));
        keyPositiveOrNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyPositiveOrNegative, gridBagConstraints);

        keySqrt.setText("sqrt");
        keySqrt.setFocusPainted(false);
        keySqrt.setMaximumSize(new java.awt.Dimension(240, 160));
        keySqrt.setMinimumSize(new java.awt.Dimension(30, 20));
        keySqrt.setPreferredSize(new java.awt.Dimension(60, 40));
        keySqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(keySqrt, gridBagConstraints);

        key7.setText("7");
        key7.setFocusPainted(false);
        key7.setMaximumSize(new java.awt.Dimension(240, 160));
        key7.setMinimumSize(new java.awt.Dimension(30, 20));
        key7.setPreferredSize(new java.awt.Dimension(60, 40));
        key7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key7, gridBagConstraints);

        key8.setText("8");
        key8.setFocusPainted(false);
        key8.setMaximumSize(new java.awt.Dimension(240, 160));
        key8.setMinimumSize(new java.awt.Dimension(30, 20));
        key8.setPreferredSize(new java.awt.Dimension(60, 40));
        key8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key8, gridBagConstraints);

        key9.setText("9");
        key9.setFocusPainted(false);
        key9.setMaximumSize(new java.awt.Dimension(240, 160));
        key9.setMinimumSize(new java.awt.Dimension(30, 20));
        key9.setPreferredSize(new java.awt.Dimension(60, 40));
        key9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key9, gridBagConstraints);

        keyDivide.setText("/");
        keyDivide.setFocusPainted(false);
        keyDivide.setMaximumSize(new java.awt.Dimension(240, 160));
        keyDivide.setMinimumSize(new java.awt.Dimension(30, 20));
        keyDivide.setPreferredSize(new java.awt.Dimension(60, 40));
        keyDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyDivide, gridBagConstraints);

        keyPercent.setText("%");
        keyPercent.setEnabled(false);
        keyPercent.setFocusPainted(false);
        keyPercent.setMaximumSize(new java.awt.Dimension(240, 160));
        keyPercent.setMinimumSize(new java.awt.Dimension(30, 20));
        keyPercent.setPreferredSize(new java.awt.Dimension(60, 40));
        keyPercent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(keyPercent, gridBagConstraints);

        key4.setText("4");
        key4.setFocusPainted(false);
        key4.setMaximumSize(new java.awt.Dimension(240, 160));
        key4.setMinimumSize(new java.awt.Dimension(30, 20));
        key4.setPreferredSize(new java.awt.Dimension(60, 40));
        key4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key4, gridBagConstraints);

        key5.setText("5");
        key5.setFocusPainted(false);
        key5.setMaximumSize(new java.awt.Dimension(240, 160));
        key5.setMinimumSize(new java.awt.Dimension(30, 20));
        key5.setPreferredSize(new java.awt.Dimension(60, 40));
        key5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key5, gridBagConstraints);

        keyMC.setText("MC");
        keyMC.setFocusPainted(false);
        keyMC.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMC.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMC.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_clear_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyMC, gridBagConstraints);

        keyMR.setText("MR");
        keyMR.setFocusPainted(false);
        keyMR.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMR.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMR.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_recall_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyMR, gridBagConstraints);

        keyMS.setText("MS");
        keyMS.setFocusPainted(false);
        keyMS.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMS.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMS.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_set_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyMS, gridBagConstraints);

        keyMPositive.setText("M+");
        keyMPositive.setFocusPainted(false);
        keyMPositive.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMPositive.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMPositive.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMPositive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_add_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(keyMPositive, gridBagConstraints);

        keyMNegative.setText("M-");
        keyMNegative.setFocusPainted(false);
        keyMNegative.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMNegative.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMNegative.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mem_subtract_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 10);
        getContentPane().add(keyMNegative, gridBagConstraints);

        keyBackspace.setText("<---");
        keyBackspace.setFocusPainted(false);
        keyBackspace.setMaximumSize(new java.awt.Dimension(240, 160));
        keyBackspace.setMinimumSize(new java.awt.Dimension(30, 20));
        keyBackspace.setPreferredSize(new java.awt.Dimension(60, 40));
        keyBackspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backspace(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyBackspace, gridBagConstraints);

        keyCE.setText("CE");
        keyCE.setFocusPainted(false);
        keyCE.setMaximumSize(new java.awt.Dimension(240, 160));
        keyCE.setMinimumSize(new java.awt.Dimension(30, 20));
        keyCE.setPreferredSize(new java.awt.Dimension(60, 40));
        keyCE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEntry(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyCE, gridBagConstraints);

        key6.setText("6");
        key6.setFocusPainted(false);
        key6.setMaximumSize(new java.awt.Dimension(240, 160));
        key6.setMinimumSize(new java.awt.Dimension(30, 20));
        key6.setPreferredSize(new java.awt.Dimension(60, 40));
        key6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key6, gridBagConstraints);

        keyMultiply.setText("*");
        keyMultiply.setFocusPainted(false);
        keyMultiply.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMultiply.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMultiply.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyMultiply, gridBagConstraints);

        keyRBracket.setText(")");
        keyRBracket.setEnabled(false);
        keyRBracket.setFocusPainted(false);
        keyRBracket.setMaximumSize(new java.awt.Dimension(240, 160));
        keyRBracket.setMinimumSize(new java.awt.Dimension(30, 20));
        keyRBracket.setPreferredSize(new java.awt.Dimension(60, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyRBracket, gridBagConstraints);

        keyFactorial.setText("n!");
        keyFactorial.setFocusPainted(false);
        keyFactorial.setMaximumSize(new java.awt.Dimension(240, 160));
        keyFactorial.setMinimumSize(new java.awt.Dimension(30, 20));
        keyFactorial.setPreferredSize(new java.awt.Dimension(60, 40));
        keyFactorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyFactorial, gridBagConstraints);

        keyYSqrtX.setText("y rt(x");
        keyYSqrtX.setFocusPainted(false);
        keyYSqrtX.setMaximumSize(new java.awt.Dimension(240, 160));
        keyYSqrtX.setMinimumSize(new java.awt.Dimension(30, 20));
        keyYSqrtX.setPreferredSize(new java.awt.Dimension(60, 40));
        keyYSqrtX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyYSqrtX, gridBagConstraints);

        key3SqrtX.setText("3 rt(x");
        key3SqrtX.setFocusPainted(false);
        key3SqrtX.setMaximumSize(new java.awt.Dimension(240, 160));
        key3SqrtX.setMinimumSize(new java.awt.Dimension(30, 20));
        key3SqrtX.setPreferredSize(new java.awt.Dimension(60, 40));
        key3SqrtX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(key3SqrtX, gridBagConstraints);

        keyTenPowerX.setText("10^x");
        keyTenPowerX.setFocusPainted(false);
        keyTenPowerX.setMaximumSize(new java.awt.Dimension(240, 160));
        keyTenPowerX.setMinimumSize(new java.awt.Dimension(30, 20));
        keyTenPowerX.setPreferredSize(new java.awt.Dimension(60, 40));
        keyTenPowerX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyTenPowerX, gridBagConstraints);

        keyLBracket.setText("(");
        keyLBracket.setEnabled(false);
        keyLBracket.setFocusPainted(false);
        keyLBracket.setMaximumSize(new java.awt.Dimension(240, 160));
        keyLBracket.setMinimumSize(new java.awt.Dimension(30, 20));
        keyLBracket.setPreferredSize(new java.awt.Dimension(60, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyLBracket, gridBagConstraints);

        keyXPower2.setText("x^2");
        keyXPower2.setFocusPainted(false);
        keyXPower2.setMaximumSize(new java.awt.Dimension(240, 160));
        keyXPower2.setMinimumSize(new java.awt.Dimension(30, 20));
        keyXPower2.setPreferredSize(new java.awt.Dimension(60, 40));
        keyXPower2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyXPower2, gridBagConstraints);

        keyXPowerY.setText("x^y");
        keyXPowerY.setFocusPainted(false);
        keyXPowerY.setMaximumSize(new java.awt.Dimension(240, 160));
        keyXPowerY.setMinimumSize(new java.awt.Dimension(30, 20));
        keyXPowerY.setPreferredSize(new java.awt.Dimension(60, 40));
        keyXPowerY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyXPowerY, gridBagConstraints);

        keyXPower3.setText("x^3");
        keyXPower3.setFocusPainted(false);
        keyXPower3.setMaximumSize(new java.awt.Dimension(240, 160));
        keyXPower3.setMinimumSize(new java.awt.Dimension(30, 20));
        keyXPower3.setPreferredSize(new java.awt.Dimension(60, 40));
        keyXPower3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyXPower3, gridBagConstraints);

        keyLog.setText("log");
        keyLog.setFocusPainted(false);
        keyLog.setMaximumSize(new java.awt.Dimension(240, 160));
        keyLog.setMinimumSize(new java.awt.Dimension(30, 20));
        keyLog.setPreferredSize(new java.awt.Dimension(60, 40));
        keyLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyLog, gridBagConstraints);

        keyInv.setText("Inv");
        keyInv.setMaximumSize(new java.awt.Dimension(240, 160));
        keyInv.setMinimumSize(new java.awt.Dimension(30, 20));
        keyInv.setPreferredSize(new java.awt.Dimension(60, 40));
        keyInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inv_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyInv, gridBagConstraints);

        keyln.setText("ln");
        keyln.setFocusPainted(false);
        keyln.setMaximumSize(new java.awt.Dimension(240, 160));
        keyln.setMinimumSize(new java.awt.Dimension(30, 20));
        keyln.setPreferredSize(new java.awt.Dimension(60, 40));
        keyln.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyln, gridBagConstraints);

        keySinH.setText("sinh");
        keySinH.setFocusPainted(false);
        keySinH.setMaximumSize(new java.awt.Dimension(240, 160));
        keySinH.setMinimumSize(new java.awt.Dimension(30, 20));
        keySinH.setPreferredSize(new java.awt.Dimension(60, 40));
        keySinH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keySinH, gridBagConstraints);

        keySin.setText("sin");
        keySin.setFocusPainted(false);
        keySin.setMaximumSize(new java.awt.Dimension(240, 160));
        keySin.setMinimumSize(new java.awt.Dimension(30, 20));
        keySin.setPreferredSize(new java.awt.Dimension(60, 40));
        keySin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keySin, gridBagConstraints);

        keyCosH.setText("cosh");
        keyCosH.setFocusPainted(false);
        keyCosH.setMaximumSize(new java.awt.Dimension(240, 160));
        keyCosH.setMinimumSize(new java.awt.Dimension(30, 20));
        keyCosH.setPreferredSize(new java.awt.Dimension(60, 40));
        keyCosH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyCosH, gridBagConstraints);

        keyCos.setText("cos");
        keyCos.setFocusPainted(false);
        keyCos.setMaximumSize(new java.awt.Dimension(240, 160));
        keyCos.setMinimumSize(new java.awt.Dimension(30, 20));
        keyCos.setPreferredSize(new java.awt.Dimension(60, 40));
        keyCos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyCos, gridBagConstraints);

        keyTanH.setText("tanh");
        keyTanH.setFocusPainted(false);
        keyTanH.setMaximumSize(new java.awt.Dimension(240, 160));
        keyTanH.setMinimumSize(new java.awt.Dimension(30, 20));
        keyTanH.setPreferredSize(new java.awt.Dimension(60, 40));
        keyTanH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyTanH, gridBagConstraints);

        keyTan.setText("tan");
        keyTan.setFocusPainted(false);
        keyTan.setMaximumSize(new java.awt.Dimension(240, 160));
        keyTan.setMinimumSize(new java.awt.Dimension(30, 20));
        keyTan.setPreferredSize(new java.awt.Dimension(60, 40));
        keyTan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(keyTan, gridBagConstraints);

        keyExp.setText("Exp");
        keyExp.setFocusPainted(false);
        keyExp.setMaximumSize(new java.awt.Dimension(240, 160));
        keyExp.setMinimumSize(new java.awt.Dimension(30, 20));
        keyExp.setPreferredSize(new java.awt.Dimension(60, 40));
        keyExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyExp, gridBagConstraints);

        keyMod.setText("Mod");
        keyMod.setFocusPainted(false);
        keyMod.setMaximumSize(new java.awt.Dimension(240, 160));
        keyMod.setMinimumSize(new java.awt.Dimension(30, 20));
        keyMod.setPreferredSize(new java.awt.Dimension(60, 40));
        keyMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        getContentPane().add(keyMod, gridBagConstraints);

        keyBlank.setEnabled(false);
        keyBlank.setFocusPainted(false);
        keyBlank.setMaximumSize(new java.awt.Dimension(240, 160));
        keyBlank.setMinimumSize(new java.awt.Dimension(30, 20));
        keyBlank.setPreferredSize(new java.awt.Dimension(60, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(keyBlank, gridBagConstraints);

        keyInt.setText("Int");
        keyInt.setFocusPainted(false);
        keyInt.setMaximumSize(new java.awt.Dimension(240, 160));
        keyInt.setMinimumSize(new java.awt.Dimension(30, 20));
        keyInt.setPreferredSize(new java.awt.Dimension(60, 40));
        keyInt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op_uni_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(keyInt, gridBagConstraints);

        keyDms.setText("dms");
        keyDms.setFocusPainted(false);
        keyDms.setMaximumSize(new java.awt.Dimension(240, 160));
        keyDms.setMinimumSize(new java.awt.Dimension(30, 20));
        keyDms.setPreferredSize(new java.awt.Dimension(60, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(keyDms, gridBagConstraints);

        keyPI.setText("pi");
        keyPI.setFocusPainted(false);
        keyPI.setMaximumSize(new java.awt.Dimension(240, 160));
        keyPI.setMinimumSize(new java.awt.Dimension(30, 20));
        keyPI.setPreferredSize(new java.awt.Dimension(60, 40));
        keyPI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(keyPI, gridBagConstraints);

        RadiosPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        RadiosPanel.setLayout(new java.awt.GridLayout(1, 0));

        Degrees.setSelected(true);
        Degrees.setText("Degrees");
        Degrees.setFocusPainted(false);
        Degrees.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Degrees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degrees_handler(evt);
            }
        });
        RadiosPanel.add(Degrees);

        Radians.setText("Radians");
        Radians.setFocusPainted(false);
        Radians.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Radians.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radians_handler(evt);
            }
        });
        RadiosPanel.add(Radians);

        Grads.setText("Grads");
        Grads.setFocusPainted(false);
        Grads.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Grads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grads_handler(evt);
            }
        });
        RadiosPanel.add(Grads);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 103;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        getContentPane().add(RadiosPanel, gridBagConstraints);

        keyFE.setText("F-E");
        keyFE.setMaximumSize(new java.awt.Dimension(240, 160));
        keyFE.setMinimumSize(new java.awt.Dimension(30, 20));
        keyFE.setPreferredSize(new java.awt.Dimension(60, 40));
        keyFE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sci_notation_handler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        getContentPane().add(keyFE, gridBagConstraints);

        View.setText("View");

        standardMode.setText("Standard");
        standardMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standard_handler(evt);
            }
        });
        View.add(standardMode);

        scientificMode.setSelected(true);
        scientificMode.setText("Scienific");
        View.add(scientificMode);

        programmerMode.setText("Programmer");
        programmerMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programmer_handler(evt);
            }
        });
        View.add(programmerMode);

        MenuBar.add(View);

        Edit.setText("Edit");

        copy.setText("Copy");
        Edit.add(copy);

        paste.setText("Paste");
        Edit.add(paste);

        MenuBar.add(Edit);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //------------------------------op_handler------------------------------
    private void op_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op_handler
        String operator = evt.getActionCommand();
        String result = "";

        switch(operator)
        {
            case "+":
                result = opAdd(answer.getText());
                break;
            case "-":
                result = opSubtract(answer.getText());
                break;
            case "*":
                result = opMultiply(answer.getText());
                break;
            case "/":
                result = opDivide(answer.getText());
                break;
            case "=":
                result = opEquals(answer.getText());
                break;
            case "y rt(x":
                result = opYRtX(answer.getText());
                break;
            case "x^y":
                result = opXPowY(answer.getText());
                break;
            case "Mod":
                result = opMod(answer.getText());
                break;
            case "Exp":
                result = opExp(answer.getText());
                break;
        }
        
        if(operator.equals(EXP))     //exception for setting text when Exp is clicked
        {
            answer.setText(number1 + ".e+");
        }
        else
        {
            answer.setText(result);
        }
        readyForNextNumber = true;
    }//GEN-LAST:event_op_handler
    //------------------------------clear------------------------------
    private void clear(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear
        calculationString = "";
        calculation.setText("");
        answer.setText("0");
        number1 = 0;
        operator = NO_OP;
    }//GEN-LAST:event_clear
   //------------------------------negate------------------------------
    private void negate(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negate
        if(answer.getText().contains("+") && operator.equals(EXP))     //invert power of number for scientific notation
        {
            //strings are immutable
            String temp;
            temp = answer.getText().replace('+', '-');
            answer.setText(temp);
        }
        else if(answer.getText().contains("-") && operator.equals(EXP))     //invert power of number for scientific notation
        {
            //strings are immutable
            String temp;
            temp = answer.getText().replace('-', '+');
            answer.setText(temp);
        }
        else if(answer.getText().startsWith("-"))
        {
            answer.setText(answer.getText().substring(1, answer.getText().length()));
        }
        else
        {
            answer.setText("-" + answer.getText());
        }
    }//GEN-LAST:event_negate
    //------------------------------op_uni_handler------------------------------
    private void op_uni_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op_uni_handler
        String operator = evt.getActionCommand();
        String result = "";

        switch(operator)
        {
            case "sqrt":
                result = opSqrt(answer.getText());
                break;
            case "%":
                result = opPercent(answer.getText());
                break;
            case "1/x":
                result = opReciprocal(answer.getText());
                break;
            case "n!":
                result = opFactorial(answer.getText());
                break;
            case "3 rt(x":
                result = op3RtX(answer.getText());
                break;
            case "10^x":
                result = opPow10(answer.getText());
                break;
            case "x^2":
                result = opXPow2(answer.getText());
                break;
            case "x^3":
                result = opXPow3(answer.getText());
                break;
            case "log":
                result = opLog(answer.getText());
                break;
            case "ln":
                result = opLn(answer.getText());
                break;
            case "sin":
                result = opSin(answer.getText());
                break;
            case "cos":
                result = opCos(answer.getText());
                break;
            case "tan":
                result = opTan(answer.getText());
                break;
            case "sinh":
                result = opSinh(answer.getText());
                break;
            case "cosh":
                result = opCosh(answer.getText());
                break;
            case "tanh":
                result = opTanh(answer.getText());
                break;
            case "Int":
                result = opInt(answer.getText());
                break;
        }

        answer.setText(result);
    }//GEN-LAST:event_op_uni_handler
    //------------------------------number_handler------------------------------
    private void number_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number_handler
        if(operator.equals(EXP))     //another Exp button exception
        {
            answer.setText(calculationString + evt.getActionCommand());
        }
        else if(evt.getActionCommand() == "pi")    //pi
        {
            answer.setText(Double.toString(PI));
        }
        else if(readyForNextNumber)
        {
            answer.setText(evt.getActionCommand());
            readyForNextNumber = false;
        }
        else
        {
            answer.setText(answer.getText() + evt.getActionCommand().charAt(0));
        }
        //take out any 0 at the beginning if there is one
        if(answer.getText().startsWith("0") && answer.getText() != "0")
        {
            answer.setText(answer.getText().substring(1, answer.getText().length()));
        }
        if(answer.getText().length() >= 3)
        {
            //if the number ends in ".0", take it off the string
            if(answer.getText().substring(answer.getText().length() - 2, answer.getText().length()) == ".0")
            {
                answer.setText(answer.getText().substring(0, answer.getText().length() - 2));
            }
        }
    }//GEN-LAST:event_number_handler
    //------------------------------backspace------------------------------
    private void backspace(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backspace
        if(answer.getText().length() > 1)
        {
            answer.setText(answer.getText().substring(0, answer.getText().length() - 1));
        }
        else
        {
            answer.setText("0");
        }
    }//GEN-LAST:event_backspace
    //------------------------------clearEntry------------------------------
    private void clearEntry(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEntry
        answer.setText("0");
        operator = NO_OP;
    }//GEN-LAST:event_clearEntry
    //------------------------------programmer_handler------------------------------
    private void programmer_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programmer_handler
        new ProgrammerGUI().setVisible(true);        //start up the programmer mode
        this.dispose();     //close the other form
    }//GEN-LAST:event_programmer_handler
    //------------------------------standard_handler------------------------------
    private void standard_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standard_handler
        new StandardGUI().setVisible(true);        //start up the programmer mode
        this.dispose();     //close the other form
    }//GEN-LAST:event_standard_handler
    //------------------------------degrees_handler------------------------------
    private void degrees_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degrees_handler
        Degrees.setSelected(true);
        Radians.setSelected(false);
        Grads.setSelected(false);
    }//GEN-LAST:event_degrees_handler
    //------------------------------radians_handler------------------------------
    private void radians_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radians_handler
        Degrees.setSelected(false);
        Radians.setSelected(true);
        Grads.setSelected(false);
    }//GEN-LAST:event_radians_handler
    //------------------------------grads_handler------------------------------
    private void grads_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grads_handler
        Degrees.setSelected(false);
        Radians.setSelected(false);
        Grads.setSelected(true);
    }//GEN-LAST:event_grads_handler
    //------------------------------inverted_handler------------------------------
    private void inv_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inv_handler
        answer.setText("Not Functional :)");
    }//GEN-LAST:event_inv_handler
    //------------------------------sci_notation_handler------------------------------
    private void sci_notation_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sci_notation_handler
        answer.setText("Not Functioanl :)");
    }//GEN-LAST:event_sci_notation_handler

    private void mem_clear_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_clear_handler
        mem = 0;
        memLabel.setText("");
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_clear_handler

    private void mem_recall_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_recall_handler
        answer.setText(Double.toString(mem));
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_recall_handler

    private void mem_set_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_set_handler
        mem = parseNumber(answer.getText());
        memLabel.setText("M");
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_set_handler

    private void mem_add_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_add_handler
        mem += parseNumber(answer.getText());
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_add_handler

    private void mem_subtract_handler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mem_subtract_handler
        mem -= parseNumber(answer.getText());
        readyForNextNumber = true;
    }//GEN-LAST:event_mem_subtract_handler
    //------------------------------opEquals------------------------------
    public String opEquals(String number)
    {
        double result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = NO_OP;
        
        calculationString = "";
        calculation.setText(calculationString);

        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opAdd------------------------------
    public String opAdd(String number)
    {
        double result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = PLUS;
        
        calculationString += (answer.getText() + " + ");
        calculation.setText(calculationString);

        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opSubtract------------------------------
    public String opSubtract(String number)
    {
        double result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = SUBTRACT;
        
        calculationString += (answer.getText() + " - ");
        calculation.setText(calculationString);

        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opMultiply------------------------------
    public String opMultiply(String number)
    {
        double result;

        if(operator.equals(NO_OP))
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = MULTIPLY;

        calculationString += (answer.getText() + " * ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opDivide------------------------------
    public String opDivide(String number)
    {
        double result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = DIVIDE;
        
        calculationString += (answer.getText() + " / ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opSqrt------------------------------
    public String opSqrt(String number)
    {
        double result;
        
        operator = SQRT;
        
        result = performOperation(parseNumber(number));
        
        calculationString += (" sqrt(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opPercent------------------------------
    public String opPercent(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = PRCNT;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += Double.toString(result);
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opReciprocal------------------------------
    public String opReciprocal(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = RCPRCL;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += (" reciproc(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opFactorial------------------------------
    public String opFactorial(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = FCT;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += (" fact(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opYSqrtX------------------------------
    public String opYRtX(String number)
    {
        double result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = YRTX;
        
        calculationString += (answer.getText() + " yroot ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------op3SqrtX------------------------------
    public String op3RtX(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = CRTX;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += (" cuberoot(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opPow10------------------------------
    public String opPow10(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = POW10;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += (" powten(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opPow2------------------------------
    public String opXPow2(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = XPOW2;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += (" sqr(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opXPowY------------------------------
    public String opXPowY(String number)
    {
        double result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = XPOWY;
        
        calculationString += (answer.getText() + " ^ ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opXPow3------------------------------
    public String opXPow3(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = XPOW3;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += (" cube(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opLog------------------------------
    public String opLog(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = LOG;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += (" log(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opLn------------------------------
    public String opLn(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = LN;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += (" ln(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opSin------------------------------
    public String opSin(String number)
    {
        double result = 0;      //initialize first
        String temp = operator;     //remember the last operator
        
        if(Degrees.isSelected())    //if degrees is selected
        {
            operator = SIND;
            result = performOperation(parseNumber(number));
            calculationString += (" sind(" + answer.getText() + ") ");
        }
        else if(Radians.isSelected())    //if radians is selected
        {
            operator = SINR;
            result = performOperation(parseNumber(number));
            calculationString += (" sinr(" + answer.getText() + ") ");
        }
        else if(Grads.isSelected())    //if grads is selected
        {
            operator = SING;
            result = performOperation(parseNumber(number));
            calculationString += (" sing(" + answer.getText() + ") ");
        }
        
        operator = temp;        //set it back to the operator before
        calculation.setText(calculationString);
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opCos------------------------------
    public String opCos(String number)
    {
        double result = 0;      //initialize first
        String temp = operator;     //remember the last operator
        
        if(Degrees.isSelected())    //if degrees is selected
        {
            operator = COSD;
            result = performOperation(parseNumber(number));
            calculationString += (" cosd(" + answer.getText() + ") ");
        }
        else if(Radians.isSelected())    //if radians is selected
        {
            operator = COSR;
            result = performOperation(parseNumber(number));
            calculationString += (" cosr(" + answer.getText() + ") ");
        }
        else if(Grads.isSelected())    //if grads is selected
        {
            operator = COSG;
            result = performOperation(parseNumber(number));
            calculationString += (" cosg(" + answer.getText() + ") ");
        }
        
        operator = temp;        //set it back to the operator before
        calculation.setText(calculationString);
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opTan------------------------------
    public String opTan(String number)
    {
        double result = 0;      //initialize first
        String temp = operator;     //remember the last operator
        
        if(Degrees.isSelected())    //if degrees is selected
        {
            operator = TAND;
            result = performOperation(parseNumber(number));
            calculationString += (" tand(" + answer.getText() + ") ");
        }
        else if(Radians.isSelected())    //if radians is selected
        {
            operator = TANR;
            result = performOperation(parseNumber(number));
            calculationString += (" tanr(" + answer.getText() + ") ");
        }
        else if(Grads.isSelected())    //if grads is selected
        {
            operator = TANG;
            result = performOperation(parseNumber(number));
            calculationString += (" tang(" + answer.getText() + ") ");
        }
        
        operator = temp;        //set it back to the operator before
        calculation.setText(calculationString);
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opSinh------------------------------
    public String opSinh(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        
        operator = SINH;
        result = performOperation(parseNumber(number));
        calculationString += (" sinh(" + answer.getText() + ") ");
        
        operator = temp;        //set it back to the operator before
        calculation.setText(calculationString);
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opCosh------------------------------
    public String opCosh(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        
        operator = COSH;
        result = performOperation(parseNumber(number));
        calculationString += (" cosh(" + answer.getText() + ") ");
        
        operator = temp;        //set it back to the operator before
        calculation.setText(calculationString);
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opTanh------------------------------
    public String opTanh(String number)
    {
        double result;
        String temp = operator;     //remember the last operator

        operator = TANH;
        result = performOperation(parseNumber(number));
        calculationString += (" tanh(" + answer.getText() + ") ");
        
        operator = temp;        //set it back to the operator before
        calculation.setText(calculationString);
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------opMod------------------------------
    public String opMod(String number)
    {
        double result;

        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = MOD;
        
        calculationString += (answer.getText() + " Mod ");
        calculation.setText(calculationString);
        
        number1 = result;
        
        return Double.toString(result);
    }
    //------------------------------opExp------------------------------
    public String opExp(String number)
    {
        double result;
        
        if(operator.equals(NO_OP)) 
        {
            result = parseNumber(number);
        }
        else
        {
            result = performOperation(parseNumber(number));
        }
        operator = EXP;
        
        calculationString += (answer.getText() + ".e+");
        calculation.setText(calculationString);

        number1 = result;
        answer.setText(answer.getText() + ".e+");
        return Double.toString(result);
    }
    //------------------------------opInt------------------------------
    public String opInt(String number)
    {
        double result;
        String temp = operator;     //remember the last operator
        operator = INT;
        
        result = performOperation(parseNumber(number));
        operator = temp;        //set it back to the operator before
        calculationString += (" Int(" + answer.getText() + ") ");
        calculation.setText(calculationString);
        
        number1 = result;

        return Double.toString(result);
    }
    //------------------------------perfomOperation------------------------------
    private double performOperation(double number2)
    {
        double result = 0.0;

        switch(operator)
        {
            case PLUS:
                result = number1 + number2;
                break;
            case SUBTRACT:
                result = number1 - number2;
                break;
            case MULTIPLY:
                result = number1 * number2;
                break;
            case DIVIDE:
                result = number1 / number2;
                break;
            case SQRT:
                result = sqrt(number2);
                break;
            case PRCNT:
                result = number1 * (number2 / 100);
                break;
            case RCPRCL:
                result = 1 / number2;
                break;
            case FCT:
                result = 1;     //set to 1 for proper calculation
                for(int i = 1; i <= number2; i++)
                {
                    result *= i;
                }
                break;
            case YRTX:
                result = pow(number1, (1.0 / number2));
                break;
            case CRTX:
                result = cbrt(number2);
                break;
            case POW10:
                result = pow(10, number2);
                break;
            case XPOW2:
                result = pow(number2, 2);
                break;
            case XPOWY:
                result = pow(number1, number2);
                break;
            case XPOW3:
                result = pow(number2, 3);
                break;
            case LOG:
                result = log10(number2);
                break;
            case LN:
                result = log(number2);
                break;
            case SIND:
                result = sin(number2 * PI / 180);
                break;
            case SINR:
                result = sin(number2);
                break;
            case SING:
                result = sin(PI * number2 /200);
                break;
            case COSD:
                result = cos(number2 * PI / 180);
                break;
            case COSR:
                result = cos(number2);
                break;
            case COSG:
                result = cos(PI * number2 /200);
                break;
            case TAND:
                result = tan(number2 * PI / 180);
                break;
            case TANR:
                result = tan(number2);
                break;
            case TANG:
                result = tan(PI * number2 /200);
                break;
            case SINH:
                result = sinh(number2);
                break;
            case COSH:
                result = cosh(number2);
                break;
            case TANH:
                result = tanh(number2);
                break;
            case MOD:
                result = number1 % number2;
                break;
            case EXP:
                //int num = 1;
                //loop to get all 0s
                //for(int i = 0; i < number2; i++)
                //{
                //    num *= 10;
                //}
                //result = number1 * num;
                result = number2;
                break;
            case INT:
                result = (int)number2;
                break;
            case DMS:
                //result = (int)number2;
                break;
        }
        
        return result;
    }
    //------------------------------parseNumber------------------------------
    private static double parseNumber(String number)
    {
        double real_number;

        try 
        {
            real_number = Double.parseDouble(number);
        }
        catch(NumberFormatException e)
        {
            real_number = Double.NaN;
        }

        return real_number;
    }
    //------------------------------main------------------------------
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScientificGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScientificGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScientificGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScientificGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run() 
            {
                new ScientificGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Degrees;
    private javax.swing.JMenu Edit;
    private javax.swing.JRadioButton Grads;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JRadioButton Radians;
    private javax.swing.JPanel RadiosPanel;
    private javax.swing.JMenu View;
    private javax.swing.JLabel answer;
    private javax.swing.JLabel calculation;
    private javax.swing.JMenuItem copy;
    private javax.swing.JPanel display;
    private javax.swing.JButton key0;
    private javax.swing.JButton key1;
    private javax.swing.JButton key2;
    private javax.swing.JButton key3;
    private javax.swing.JButton key3SqrtX;
    private javax.swing.JButton key4;
    private javax.swing.JButton key5;
    private javax.swing.JButton key6;
    private javax.swing.JButton key7;
    private javax.swing.JButton key8;
    private javax.swing.JButton key9;
    private javax.swing.JButton keyAdd;
    private javax.swing.JButton keyBackspace;
    private javax.swing.JButton keyBlank;
    private javax.swing.JButton keyCE;
    private javax.swing.JButton keyClear;
    private javax.swing.JButton keyCos;
    private javax.swing.JButton keyCosH;
    private javax.swing.JButton keyDivide;
    private javax.swing.JButton keyDms;
    private javax.swing.JButton keyEquals;
    private javax.swing.JButton keyExp;
    private javax.swing.JToggleButton keyFE;
    private javax.swing.JButton keyFactorial;
    private javax.swing.JButton keyInt;
    private javax.swing.JButton keyInv;
    private javax.swing.JButton keyLBracket;
    private javax.swing.JButton keyLog;
    private javax.swing.JButton keyMC;
    private javax.swing.JButton keyMNegative;
    private javax.swing.JButton keyMPositive;
    private javax.swing.JButton keyMR;
    private javax.swing.JButton keyMS;
    private javax.swing.JButton keyMod;
    private javax.swing.JButton keyMultiply;
    private javax.swing.JButton keyPI;
    private javax.swing.JButton keyPercent;
    private javax.swing.JButton keyPeriod;
    private javax.swing.JButton keyPositiveOrNegative;
    private javax.swing.JButton keyRBracket;
    private javax.swing.JButton keyReciprocal;
    private javax.swing.JButton keySin;
    private javax.swing.JButton keySinH;
    private javax.swing.JButton keySqrt;
    private javax.swing.JButton keySubract;
    private javax.swing.JButton keyTan;
    private javax.swing.JButton keyTanH;
    private javax.swing.JButton keyTenPowerX;
    private javax.swing.JButton keyXPower2;
    private javax.swing.JButton keyXPower3;
    private javax.swing.JButton keyXPowerY;
    private javax.swing.JButton keyYSqrtX;
    private javax.swing.JButton keyln;
    private javax.swing.JLabel memLabel;
    private javax.swing.JMenuItem paste;
    private javax.swing.JRadioButtonMenuItem programmerMode;
    private javax.swing.JRadioButtonMenuItem scientificMode;
    private javax.swing.JRadioButtonMenuItem standardMode;
    // End of variables declaration//GEN-END:variables
}
